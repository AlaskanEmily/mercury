\input texinfo
@setfilename mercury_ref.info
@settitle The Mercury Language Reference Manual

@c @ignore
@ifinfo
@format
START-INFO-DIR-ENTRY
* Mercury: (mercury_ref).        The Mercury Language Reference Manual
END-INFO-DIR-ENTRY
@end format
@end ifinfo
@c @end ignore

@c @smallbook
@c @cropmarks
@finalout
@setchapternewpage off
@ifinfo
This file documents the Mercury programming language.

Copyright (C) 1995 University of Melbourne.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

@ignore
Permission is granted to process this file through Tex and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions.
@end ifinfo

@titlepage
@c @finalout
@title The Mercury Language Reference Manual
@subtitle BETA TEST version - July, 1995
@author Fergus Henderson
@author Thomas Conway
@author Zoltan Somogyi
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 1995 University of Melbourne.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions.
@end titlepage
@page
@c ---------------------------------------------------------------------------

@ifinfo
@node Top,,, (mercury)
@top
@c @chapter Mercury Language Reference Manual - BETA TEST version, July 1995
@end ifinfo
@menu
* Introduction::      A brief introduction to Mercury
* Syntax::            Mercury's syntax is similar to ISO Prolog
* Types::             Mercury has a strong parametric polymorphic type system
* Modes::             Modes allow you to specify the direction of data flow
* Unique modes::      Unique modes allow you to specify when there is only one
                      reference to a particular value, so the compiler can
                      safely use destructive update to modify that value.
* Determinism::       Determinism declarations let you specify that a predicate
                      should never fail or should never succeed more than once
* Higher-order::      Mercury supports higher-order predicates, closures,
                      lambda expressions, and currying.
* Modules::           Modules allow you to divide a program into smaller parts
* Semantics::         An informal semantics for Mercury programs
@end menu

@node Introduction
@chapter Introduction

Mercury is a new general-purpose programming language, designed
and implemented by a small group of researchers at the University
of Melbourne, Australia.  Mercury is based on the paradigm of
pure declarative logic programming, and was designed to be
useful for the development of large and robust ``real-world'' applications.
It improves on existing logic programming languages by providing
increased productivity, reliability and efficiency, and by avoiding the
need for non-logical program constructs.

Mercury requires programmers to supply
type, mode and determinism declarations for the predicates they write.
The compiler checks these declarations,
and rejects the program if it cannot prove
that every predicate satisfies its declarations.
This improves reliability,
since many kinds of errors simply cannot happen
in successfully compiled Mercury programs.
It also improves productivity,
since the compiler pinpoints many errors
that would otherwise require manual debugging to locate.
The fact that declarations are checked by the compiler
makes them much more useful than comments
to anyone who has to maintain the program.
The compiler also exploits the guaranteed correctness of the declarations
for significantly improving the efficiency of the code it generates.

To facilitate programming-in-the-large, to allow separate compilation,
and to support encapsulation, Mercury has a simple module system.
Mercury's standard library has a variety of pre-defined modules
for common programming tasks --- see the Mercury Library Reference Manual.

@node Syntax
@chapter Syntax

@menu
* Syntax Overview::
* Tokens::
* Terms::
* Items::
* Declarations::
* Facts::
* Rules::
* Goals::
* DCG-rules::
* DCG-goals::
* Implicit quantification::
* Elimination of double negation::
@end menu

@node Syntax Overview
@section Syntax overview

Mercury's syntax is similar to the syntax of Prolog, with some
additional declarations for types, modes, determinism, and the module system.
A Mercury program consists of a set of modules.  Each module is a file
containing a sequence of items (declarations and clauses).  Each item
is a term followed by a period.  Each term is composed of a sequence
of tokens, and each token is composed of a sequence of characters.
Like Prolog, Mercury has the Definite Clause Grammar (DCG) notation
for clauses.

@node Tokens
@section Tokens

Tokens in Mercury are exactly the same as in ISO Prolog.

The different tokens are as follows.  Tokens may be separated by
whitespace.

@table @emph

@item string
A string is a sequence of characters enclosed in double quotes (@code{"}).
Strings may contain backslash escapes.  @samp{\a} stands for ``alert''
(a beep character), @samp{\b} for backspace, @samp{\r} for carriage-return,
@samp{\f} for form-feed, @samp{\t} for tab, @samp{\n} for newline,
@samp{\v} for vertical-tab.  An escaped backslash, single-quote, or
double-quote stands for itself.  The sequence @samp{\x} introduces
a hexadecimal escape; it must be followed by a sequence of hexadecimal
digits and then a closing backslash.  It is replaced
with the character whose character code is identified by the hexadecimal
number.  Similarly, a backslash followed by an octal digit is the
beginning of an octal escape; as with hexadecimal escapes, the sequence
of octal digits must be terminated with a closing backslash.
A backslash followed immediately by a newline is deleted; thus an
escaped newline can be used to continue a string over more than one
source line.  (String literals may also contain embedded newlines.)

@item name
A name is either an unquoted name or a quoted name.
An unquoted name is a lowercase letter followed by zero or more letters,
underscores, and digits.  A quoted name is any sequence of zero or more
characters enclosed in single quotes (@code{'}).  Quoted names can contain
backslash escapes of the same form as for strings.

@item variable
A variable is an uppercase letter or underscore followed by zero or
more letters, underscores, and digits. 
A variable token consisting of single underscore is treated
specially: each instance of @samp{_} denotes a distinct variable.
(In addition, variables starting with an underscore are presumed to be
``don't-care'' variables; the compiler will issue a warning if a
variable that does not start with an underscore occurs only once, or if
a variable starting with an underscore occurs more than once in the
same scope.)

@item integer
An integer is either a decimal, binary, octal, hexadecimal, or character-code
literal.
A decimal literal is any sequence of decimal digits.
A binary literal is @samp{0b} followed by any sequence of binary digits.
An octal literal is @samp{0o} followed by any sequence of octal digits.
A hexadecimal literal is @samp{0x} followed by any sequence of hexadecimal
digits.
A character-code literal is @samp{0'} followed by any single character.

@item float
A floating point literal consists of a sequence of decimal digits,
a decimal point and a sequence of digits (the fraction part), and
the letter @samp{E} and another sequence of decimal digits (the exponent).
The fraction part or the exponent (but not both) may be omitted.

@item open_ct
A left parenthesis, @samp{(}, that is not preceded by whitespace.

@item open
A left parenthesis, @samp{(}, that is preceded by whitespace.

@item close
A right parenthesis, @samp{)}.

@item open_list
A left square bracket, @samp{[}.

@item close_list
A right square bracket, @samp{]}.

@item open_curly
A left curly bracket, @samp{@{}.

@item close_curly
A right curly bracket, @samp{@}}.

@item ht_sep
A ``head-tail separator'', i.e. a vertical bar, @samp{|}.

@item comma
A comma, @samp{,}.

@item end
A full stop (period), @samp{.}.

@item eof
The end of file.

@end table

@node Terms
@section Terms

Terms in Mercury are exactly the same as in ISO Prolog, with two
exceptions.  The first one is that double-quoted strings are atomic in
Mercury, they are not abbreviations for lists of character codes.
The second is that Mercury terms can contain lamdba expressions.

A term is either a variable, a functor, or a lambda expression.

A functor is an integer, a float, a string, a character literal
(any single-character name), a name, or a compound term.
A compound term is a name followed without any intervening
whitespace by an open parenthesis (i.e. an open_ct token),
a sequence of argument terms separated by commas, and a close
parenthesis.  Compound terms may also be specified using
operator notation, as in Prolog.

A lambda expression is a compound term of the form

@example
lambda([Var1::Mode1, Var2::Mode2, @dots{}] is Det, Goal)
@end example

@noindent
where Var1, Var2, @dots{} are variables, Mode1, Mode2, @dots{} are
modes [@xref{Modes}], Det is a determinism [@xref{Determinism}],
and Goal is a goal [@xref{Goals}].  See @xref{Higher-order}.

@node Items
@section Items

Each item in a Mercury module is either a declaration or a clause.
If the top-level functor of the term is @samp{:-/1},
the item is a declaration, otherwise it is a clause.
There are three types of clauses.
If the top-level functor of the item is @samp{:-/2}, the item is a rule.
If the top-level functor is @samp{-->/2}, the item is a DCG rule.
Otherwise, the item is a fact.

@node Declarations
@section Declarations

The allowed declarations are:

@example
:- type
:- pred
:- inst
:- mode
:- module
:- interface
:- implementation
:- import_module
:- external
:- end_module
@end example

The @samp{type} and @samp{pred} declarations are used for the type system,
the @samp{inst} and @samp{mode} declarations are for the mode system,
and the remainder are for the module system.  They are described in
more detail in their respective chapters.

(The current implementation allows @samp{when/2} declarations,
but ignores them.
This helps when one wants to write a program
that is both a Mercury program and an NU-Prolog program.)

@node Facts
@section Facts

A fact is an item of the form @samp{@var{Head}},
where the top-level functor of @var{Head}
is not @code{:-/1}, @code{:-/2}, or @code{-->/2}.
The @var{Head} term must not be a variable.
The top-level functor of the @var{Head}
determines which predicate the clause belongs to;
the predicate must have been declared
in a previous @samp{pred} declaration in this module.
A fact is equivalent to a rule @samp{@var{Head} :- true}.

@node Rules
@section Rules

A rule is an item of the form @samp{@var{Head} :- @var{Body}}.
The @var{Head} term must not be a variable.  The top-level functor
of the @var{Head} determines which predicate the clause belongs to;
the predicate must have been declared in a previous @samp{pred}
declaration in this module.  The @var{Body} must be a valid goal.

@node Goals
@section Goals

A goal is a term of one of the following forms:

@table @asis
@item @code{some @var{Vars} @var{Goal}}
An existential quantification.
@var{Vars} must be a list of variables.
@var{Goal} must be a valid goal.

@item @code{all @var{Vars} @var{Goal}}
A universal quantification.
@var{Vars} must be a list of variables.
@var{Goal} must be a valid goal.
This is an abbreviation for @samp{not (some @var{Vars} not @var{Goal})}.

@item @code{@var{Goal1}, @var{Goal2}}
A conjunction.
@var{Goal1} and @var{Goal2} must be valid goals.

@item @code{@var{Goal1} ; @var{Goal2}}
where @var{Goal1} is not of the form @samp{Goal1a -> Goal1b}:
a disjunction.
@var{Goal1} and @var{Goal2} must be valid goals.

@item @code{true}
The empty conjunction.
Always succeeds.

@item @code{fail}
The empty disjunction.
Always fails.

@item @code{not @var{Goal}}
@itemx @code{\+ @var{Goal}}
A negation.
The two different syntaxes have identical semantics.
@var{Goal} must be a valid goal.

@item @code{@var{Goal1} => @var{Goal2}}
An implication.
This is an abbreviation for @samp{not (@var{Goal1}, not @var{Goal2})}.

@item @code{@var{Goal1} <= @var{Goal2}}
A reverse implication.
This is an abbreviation for @samp{not (@var{Goal2}, not @var{Goal1})}.

@item @code{@var{Goal1} <=> @var{Goal2}}
A logical equivalence.
This is an abbreviation for
@samp{(@var{Goal1} => @var{Goal2}), (@var{Goal1} <= @var{Goal2}}).

@item @code{if @var{CondGoal} then @var{ThenGoal} else @var{ElseGoal}}
@itemx @code{@var{CondGoal} -> @var{ThenGoal} ; @var{ElseGoal}}
An if-then-else.
The two different syntaxes have identical semantics.
@var{CondGoal}, @var{ThenGoal}, and @var{ElseGoal} must be valid goals.
Note that the ``else'' part is @emph{not} optional.

@item @code{@var{Term1} = @var{Term2}}
A unification.

@item @code{@var{Term1} \= @var{Term2}}
An inequality. 
This is an abbreviation for @samp{not (@var{Term1} = @var{Term2})}.

@item @code{call(Closure)}
@itemx @code{call(Closure1, Arg1)}
@itemx @code{call(Closure2, Arg1, Arg2)}
@itemx @code{call(Closure3, Arg1, Arg2, Arg3)}
@itemx @dots{}
A higher-order predicate call.  @samp{call(Closure)} just calls
the specified closure.  The other forms append the specified
arguments onto the argument list of the closure before calling it.
See @xref{Higher-order}.

@item @code{@var{Call}}
Any term which does not match any of the above forms
must be a predicate call.
If the term is a variable @var{Var},
it is treated as if it were @samp{call(@var{Var})},
i.e. as a higher-order predicate call.
Otherwise, the top-level functor of the term
determines the predicate called;
the predicate must be declared in a @code{pred} declaration
in the module or in the interface of an imported module.

@end table

@node DCG-rules
@section DCG-rules

DCG-rules in Mercury have identical syntax and semantics to
DCG-rules in Prolog.

A DCG-rule is an item of the form @samp{@var{Head} --> @var{Body}}.
The @var{Head} term must not be a variable.  
A DCG-rule is an abbreviation for an ordinary rule with two
additional implicit arguments appended to the arguments of @var{Head}.
These arguments are fresh variables which we shall call
@var{V_in} and @var{V_out}.
The @var{Body} must be a valid DCG-goal,
and is an abbreviation for an ordinary goal.
The next section defines a mathematical function
@samp{DCG-transform(@var{V_in}, @var{V_out}, @var{DCG-goal})}
which specifies the semantics of how DCG goals are transformed into
ordinary goals.  (The @samp{DCG-transform} function is purely for the
purposes of exposition, to define the semantics --- it is not part of the
language.)

@node DCG-goals
@section DCG-goals

A DCG-goal is a term of one of the following forms:

@table @code
@item some @var{Vars} @var{DCG-goal}
A DCG existential quantification.
@var{Vars} must be a list of variables.
@var{DCG-goal} must be a valid DCG-goal.

Semantics:
@example
transform(V_in, V_out, some Vars DCG_goal) = 
some Vars transform(V_in, V_out, DCG_goal)
@end example

@item all @var{Vars} @var{DCG-goal}
A DCG universal quantification.
@var{Vars} must be a list of variables.
@var{DCG-goal} must be a valid DCG-goal.

Semantics:
@example
transform(V_in, V_out, all Vars DCG_goal) = 
all Vars transform(V_in, V_out, DCG_goal)
@end example

@item @var{DCG-goal1}, @var{DCG-goal2}
A DCG sequence.
Intuitively, this means ``parse DCG-goal1 and then parse DCG-goal2''
or ``do DCG-goal1 and then do DCG-goal2''.
(Note that the only way this construct actually forces the desired sequencing
is by the modes of the implicit DCG arguments.)
@var{DCG-goal1} and @var{DCG-goal2} must be valid DCG-goals.

Semantics:
@c XXX too indented
@example
transform(V_in, V_out, (DCG-goal1, DCG-goal2)) =
transform(V_in, V_new, DCG_goal1), transform(V_new, V_out, DCG_goal2)
@end example
where V_new is a fresh variable.

@item @var{DCG-goal1} ; @var{DCG-goal2}
A disjunction.  @var{DCG-goal1} and @var{DCG-goal2} must be valid goals.
@var{DCG-goal1} must not be of the form @samp{DCG-goal1a -> DCG-goal1b}.
(If it is, then the goal is an if-then-else, not a disjunction.)

Semantics:
@c XXX too indented
@example
transform(V_in, V_out, (DCG_goal1 ; DCG_goal2)) =
transform(V_in, V_out, DCG_goal1) ; transform(V_in, V_out, DCG_goal2)
@end example

@item @{ @var{Goal} @}
A brace-enclosed ordinary goal.
@var{Goal} must be a valid goal.

Semantics:
@example
transform(V_in, V_out, @{ Goal @}) = (Goal, V_out = V_in)
@end example

@itemx [@var{Term}, @dots{}]
A DCG input match.
Unifies the implicit DCG input variable V_in,
which must have type @samp{list(_)},
with a list whose initial elements are the terms specified
and whose tail is the implicit DCG output variable V_out.

Semantics:
@example
transform(V_in, V_out, [Term1, @dots{}]) = (V_in = [Term, @dots{} | V_Out])
@end example

@item []
The null DCG goal (an empty DCG input match).
Equivalent to @samp{@{ true @}}.

Semantics:
@example
transform(V_in, V_out, []) = (V_out = V_in)
@end example

@item not @var{DCG-goal}
@itemx \+ @var{DCG-goal}
A DCG negation.
The two different syntaxes have identical semantics.
@var{Goal} must be a valid goal.

Semantics:
@example
transform(V_in, V_out, not DCG_goal) =
(not transform(V_in, V_new, DCG_goal), V_out = V_in)
@end example
where V_new is a fresh variable.

@item if @var{CondGoal} then @var{ThenGoal} else @var{ElseGoal}
@itemx @var{CondGoal} -> @var{ThenGoal} ; @var{ElseGoal}
A DCG if-then-else.
The two different syntaxes have identical semantics.
@var{CondGoal}, @var{ThenGoal}, and @var{ElseGoal} must be valid DCG-goals.

Semantics:
@example
transform(V_in, V_out, if CondGoal then ThenGoal else ElseGoal) =
if transform(V_in, V_cond, CondGoal) then
        transform(V_cond, V_out, ThenGoal)
else
        transform(V_in, V_out, ElseGoal)
@end example

@item =(@var{Term})
A DCG unification.  Unifies @var{Term} with the implicit DCG argument.

Semantics:
@example
transform(V_in, V_out, =(Term)) = (Term = V_in, V_out = V_in)
@end example

@item @var{DCG-call}
Any term which does not match any of the above forms
must be a DCG predicate call.
If the term is a variable @var{Var},
it is treated as if it were @samp{call(@var{Var})}.
Then, the two implicit DCG arguments are appended to the specified arguments.

Semantics:
@example
transform(V_in, V_out, p(A1, @dots{}, AN)) =
p(A1, @dots{}, AN, V_in, V_out)
@end example

@end table

@node Implicit quantification
@section Implicit quantification

The rule for implicit quantification in Mercury
is not the same as the usual one in mathematical logic.
In Mercury variables that do not occur in the head of a clause
are implicitly existentially quantified around their closest enclosing scope
(in a sense to be made precise in the following paragraphs).
This allows most existential quantifiers to be omitted,
and leads to more concise code.

An occurrence of a variable is @dfn{in a negated context}
if it is in a negation,
in a universal quantification,
in the condition of an if-then-else,
in an inequality,
or in a lambda expression.

Two goals are @dfn{parallel}
if they are different disjuncts of the same disjunction,
or if one is the ``else'' part of an if-then-else
and the other goal is either the ``then'' part or the condition
of the if-then-else.

If a variable occurs in a negated context
and does not occur outside of that negated context other than in parallel goals
(and in the case of a variable in the condition of an if-then-else,
other than in the ``then'' part of the if-then-else),
then that variable is implicitly existentially quantified inside the negation.

@node Elimination of double negation
@section Elimination of double negation

The treatment of inequality, universal quantification,
implication, and logical equivalence as abbreviations
can cause the introduction of double negations
which could make otherwise well-formed code mode-incorrect.
To avoid this problem, the language specifies that
double negations are removed after syntax analysis,
before mode analysis is performed.

@node Types
@chapter Types

The type system is based on polymorphic many-sorted logic.

Certain special types are builtin, or are defined in the Mercury library:

@table @asis
@item Primitive types: @code{char}, @code{int}, @code{float}, @code{string}.
There is a special syntax for constants of type @code{int}, @code{float},
and @code{string}.  (For @code{char}, the standard syntax suffices.)

@item Predicate types: @code{pred}, @code{pred(T)}, @code{pred(T1, T2)}, @dots{}
These higher-order predicate types are used to pass predicate addresses
and closures to other predicates.  See @xref{Higher-order}.

@item The universal type: @code{univ}.
The type @code{univ} is defined in the standard library module @code{std_util},
along with the predicates @code{type_to_univ/2} and @code{univ_to_type/2}.
With those predicates, any type can be converted to the universal type
and back again.
The universal type is useful for situations
where you need heterogeneous collections.

@item The ``state-of-the-world'' type: @code{io__state}.
The type @code{io__state} is defined in the standard library module @code{io},
and represents the state of the world.
Predicates which perform I/O are passed the old state of the world
and produce a new state of the world.
In this way, we can give a declarative semantics to code that performs I/O.

@end table

New types can be introduced with @samp{:- type} declarations.
There are several categories of derived types:

@itemize @bullet
@item
Discriminated unions: these encompass both enumeration and
record types in other languages.
A derived type is defined using @samp{:- type @var{type} ---> @var{body}}. 
(Note there are @emph{three} dashes in that arrow.
It should not be confused with the two-dash arrow used for DCGs
or the one-dash arrow used for if-then-else.)
If the @var{type} term is a functor of arity zero,
it names a monomorphic type.
Otherwise, it names a polymorphic type;
the arguments of the functor must be distinct type variables.
The @var{body} term is defined as
a sequence of constructor definitions separated by semi-colons.
Each constructor definition is a functor whose arguments (if any) are types.
Type definitions must be @dfn{transparent}:
all type variables occuring in the @var{body}
must also occur in the @var{type}.

Here are some examples:

@example
:- type fruit
        --->    apple
        ;       orange
        ;       banana
        ;       pear.

:- type strange
        --->    foo(int)
        ;       bar(string).

:- type employee
        --->    employee(
                       string,               % name
                       int,                  % age
                       string                % department
                ).

:- type tree
        --->    empty
        ;       leaf(int)
        ;       branch(tree, tree).

:- type list(T)
        --->    []
        ;       [T | list(T)].

:- type pair(T1, T2)
        --->    T1 - T2.
@end example

If the body of a discriminated union type definition
contains a term whose top-level functor is @code{';'/2},
the semi-colon is normally assumed to be a separator.
This makes it difficult to define a type
whose constructors include @code{';'/2}.
To allow this, curly braces can be used to quote the semi-colon.
It is then also necessary to quote curly braces.
The following example illustrates this:

@example
:- type tricky
        --->    @{ int ; int @}
        ;       @{ @{ int @} @}.
@end example

Each discriminated union type definition introduces a distinct type.
Mercury considers two discriminated union types that have the same bodies
to be distinct types (name equivalence).
Having two types of any kind with the same name in the program is an error.
(We hope to relax this in the future.)

@item
Equivalence types: these are type abbreviations.
They are defined using `==' as follows.
They may be polymorphic.

@example
:- type money == int.
:- type assoc_list(KeyType, ValueType)
        == list(pair(KeyType, ValueType)).
@end example

Like discriminated union type definitions,
equivalence type definitions must be transparent.

Mercury treats an equivalence type
as an abbreviation for the type on the right hand side of the definition;
the two are equivalent in all respects
in scopes where the equivalence type is visible.

@item
Abstract types: these are types whose implementation is hidden.
The type declarations

@example
:- type t1.
:- type t2(T1, T2).
@end example

@noindent
declare types @code{t1/0} and @code{t2/2} to be abstract types.
Such declarations are only useful in the interface section of a module.
This means that the type names will be exported,
but the constructors (functors) for these types will not be exported.
The implementation section of a module
must have give the definition of all the abstract types
named in the interface section of the module.
Abstract types may be defined as either discriminated union types
or as equivalence types.

@end itemize

Constructors may be overloaded among different types:
there may be any number of constructors with a given name and arity,
so long as they all have different types.
However, there must be only one constructor
with a given name, arity, and result type.
(There is no particularly good reason for this restriction;
in the future we may allow several such functors
as long as they have different argument types.)
Note that excessive overloading of constructors can slow down type checking
and can make the program confusing for human readers,
so overloading should not be over-used.

The argument types of each predicate
must be explicitly declared with a @samp{:- pred} declaration.
These declarations may be polymorphic.
For example:

@example
:- pred list__member(T, list(T)).
@end example

Predicates may not be overloaded:
there must only be one predicate with a given name and arity in each program.
(This restriction will hopefully be relaxed in the future.)

The compiler infers the types of variables and overloaded constructors.
A @dfn{type assignment} is an assignment of a type
to every variable and constructor in a clause.
A type assignment is @dfn{valid} if it satisfies the following conditions.
Each constructor in a clause
must have been declared in at least one visible type declaration.
The type assigned to each constructor
must match one of the type declarations for that constructor,
and the types assigned to the arguments of that constructor
must match the argument types specified in that type declaration.
The type assigned to each predicate argument must match
the type specified in the @samp{:- pred} declaration for that predicate.
The type assigned to each head argument in a clause must exactly match
the type specified in the corresponding @samp{:- pred} declaration.
(Here ``match'' means to be an instance of,
i.e. to be identical to for some substitution of the type parameters,
and ``exactly match'' means to be identical up to renaming of type parameters.)

One type assignment @var{A} is said to be
@dfn{more general} than another type assignment @var{B}
if there is a binding of the type parameters in A
that makes it identical (up to renaming of parameters) to B.
If there is more than one valid type assignment,
the compiler must choose the most general one.
If there are two valid type assignments which are not identical up to renaming
and neither of which is more general than the other,
then there is a type ambiguity, and compiler must report an error.
A clause is @dfn{type-correct}
if there is a unique (up to renaming) most general valid type assignment.
Every clause in a Mercury program must be type-correct.

@node Modes
@chapter Modes

The @dfn{mode} of a predicate is a mapping
from the initial state of instantiation of the arguments of the predicate
to their final state of instantiation.
To describe states of instantiation,
we use information provided by the type system.
Types can be viewed as regular trees with two kinds of nodes:
or-nodes representing types
and and-nodes representing constructors.
The children of an or-node are the constructors
that can be used to construct terms of that type;
the children of an and-node are the types
of the arguments of the constructors.
We attach mode information to the or-nodes of type trees.

An @dfn{instantiatedness tree} is an assignment
of an @dfn{instantiatedness} --- either @dfn{free} or @dfn{bound} ---
to each or-node of a type tree,
with the constraint that all descendants of a free node must be free.

A term is @dfn{approximated by} an instantiatedness tree
if for every node in the instantiatedness tree,

@itemize @bullet
@item
if the node is ``free'',
then the corresponding node in the term (if any)
is a free variable that does not share with any other variable
(we call such variables @dfn{distinct});

@item
if the node is ``bound'',
then the corresponding node in the term (if any)
is a function symbol.

@end itemize

When an instantiatedness tree tells us that a variable is bound,
there may be several alternative function symbols to which it could be bound.
The instantiatedness tree does not tell us which of these it is bound to;
instead for each possible function symbol it tells us exactly
which arguments of the function symbol will be free and which will be bound.
The same principle applies recursively to these bound arguments.

Mercury's mode system allows users
to declare names for instantiatedness trees using declarations such as

@example
:- inst listskel = bound( [] ; [free | listskel] ).
@end example

This instantiatedness tree describes lists
whose skeleton is known but whose elements are distinct variables.
As such, it approximates the term @code{[A,B]}
but not the term @code{[H|T]} (only part of the skeleton is known),
the term @code{[A,2]} (not all elements are variables),
or the term @code{[A,A]} (the elements are not distinct variables).

As a shorthand, the mode system provides @samp{free} and @samp{ground}
as names for instantiatedness trees
all of whose nodes are free and bound respectively.
The shape of these trees is determined by
the type of the variable to which they apply.

As execution proceeds, variables may become more instantiated.
A @dfn{mode mapping} is a mapping
from an initial instantiatedness tree to a final instantiatedness tree,
with the constraint that no node of the type tree
is transformed from bound to free.
Mercury allows the user to specify mode mappings directly
by expressions such as @code{inst1 -> inst2},
or to give them a name using declarations such as

@example
:- mode m :: inst1 -> inst2.
@end example

Two standard shorthand modes are provided,
corresponding to the standard notions of inputs and outputs:

@example
:- mode in :: ground -> ground.
:- mode out :: free -> ground.
@end example

Prolog fans who want to use the symbols @samp{+} and @samp{-}
can do so by simply by defining them using a mode declaration:

@example
:- mode (+) :: in.
:- mode (-) :: out.
@end example

These two modes are enough for most predicates.
Nevertheless, Mercury's mode system is sufficiently
expressive to handle more complex data-flow patterns,
including those involving partially instantiated data structures.  
(The current implementation does not handle
partially instantiated data structures yet.)

For example, consider an
interface to a database that associates data with keys, and provides
read and write access to the items it stores.  To represent accesses to
the database over a network, you would need declarations such as

@example
:- type operation
        --->    lookup(key, data)
        ;       set(key, data).
:- inst request =
        bound(  lookup(ground, free)
        ;       set(ground, ground)
        ).
:- mode create_request :: free -> request.
:- mode satisfy_request :: request -> ground.
@end example

@samp{inst} and @samp{mode} declarations can be parametric.
For example, the following declaration 

@example
:- inst listskel(Inst) = bound( [] ; [Inst | listskel] ).
@end example

@noindent
defines the inst @samp{listskel(Inst)} to be a list skeleton
whose elements have inst @samp{Inst}; you can the use insts
such as @samp{listskel(listskel(free))}, which represents
the instantiation state of a list of lists of free variables.
The standary library provides the parametric modes

@example
:- mode in(Inst) :: Inst -> Inst.
:- mode out(Inst) :: free -> Inst.
@end example

@noindent
so that for example the mode @samp{create_request} defined above
could have be defined as

@example
:- mode create_request :: out(request).
@end example

A @dfn{predicate mode declaration}
assigns a mode mapping to each argument of a predicate.
For example, given the mode names defined by

@example
:- mode out_listskel ::
        free -> listskel.
:- mode in_listskel ::
        listskel -> listskel.
@end example

the (type and) mode declarations of the predicates length and append
are as follows:

@example
:- pred length(list(T), int).
:- mode length(in_listskel, out).
:- mode length(out_listskel, in).

:- pred append(list(T), list(T), list(T)).
:- mode append(in, in, out).
:- mode append(out, out, in).
@end example

Alternately, the mode declarations for @samp{length} could use
the standard library modes @samp{in/1} and @samp{out/1}:

@example
:- pred length(list(T), int).
:- mode length(in(listskel), out).
:- mode length(out(listskel), in).
@end example

If a predicate has only one mode, the @samp{pred} and @samp{mode}
declaration can be combined:

@example
:- pred append(list(T)::in, list(T)::in, list(T)::out).
@end example

A predicate mode declaration is an assertion by the programmer
that for all possible argument terms for the predicate
that are approximated (in our technical sense)
by the initial instantiatedness trees of the mode declaration
and all of whose free variables are distinct,
if the predicate succeeds then
the resulting binding of those argument terms
will in turn be approximated
by the final instantiatedness trees of the mode declaration,
with all free variables again being distinct.
We refer to such assertions as @dfn{mode declaration constraints}.
These assertions are checked by the compiler,
which rejects programs if it cannot prove
that their mode declaration constraints are satisfied.

Note that with the usual definition of append, the mode

@example
:- mode append(in_listskel, in_listskel, out_listskel).
@end example

would not be allowed, since it would create aliasing between the
different arguments --- on success of the predicate, the list elements
would be free variables but they would not be distinct.

@ignore
Note that for every mode of a predicate
in which a node is @dfn{produced} (mapped from free to bound)
there is another mode for that predicate
in which the node is @dfn{consumed} (mapped from bound to bound),
and for every mode in which a node is ignored (mapped from free to free)
there is another mode in which the node is mapped from bound to bound.
Such modes are called @dfn{implied modes}.
@end ignore

The @dfn{mode set} for a predicate
is the set of mode declarations for the predicate
plus all their implied modes.
A mode set is an assertion by the programmer
that the predicate should only be called with argument terms
that are approximated by the initial instantiatedness trees
of one of the mode declarations in the set
(i.e. the specified modes and the modes they imply
are the only allowed modes for this predicate).
We refer to the assertion associated with a mode set
as the @dfn{mode set constraint};
these are also checked by the compiler.

A predicate @var{p} is @dfn{well-moded
with respect to a given mode declaration}
if given that the predicates called by @var{p}
all satisfy their mode declaration constraints,
there exists an ordering of the literals in the definition of @var{p}
such that

@itemize @bullet
@item
@var{p} satisfies its mode declaration constraint, and
@item
@var{p} satisfies the mode set constraint of all of the predicates it calls
@end itemize

We say that a predicate is well-moded
if it is well-moded with respect to
all the mode declarations in its mode set,
and we say that a program is well-moded
if all its predicates are well-moded.

The mode analysis algorithm checks one mode of one predicate at a time.
It abstractly interprets the definition of the predicate,
keeping track of the instantiatedness of each variable,
and selecting a mode for each call and unification in the definition.
To ensure that
the mode set constraints of called predicates are satisfied,
the compiler may reorder the elements of conjunctions;
it reports an error if no satisfactory order exists.
Finally it checks that
the resulting instantiatedness of the predicate's arguments
is the same as the one given by the predicate's mode declaration.

The mode analysis algorithm annotates each call with the mode used.

@node Unique modes
@chapter Unique modes

Mode declarations can also specify so-called ``unique modes''.
Mercury's unique modes are similar to ``linear types'' in some
functional programming languages such as Clean.  They allow you to
specify when there is only one reference to a particular value, and
when there will be no more references to that value.  If the compiler
knows there are will be more references to a value, it can perform
``compile-time garbage collection'' by automatically inserting code
to deallocate the storage associated with that value.  Even more
importantly, the compiler can also simply reuse the storage immediately,
for example by destructively updating one element of an array rather
than making a new copy of the entire array in order to change one element.
Unique modes are also the mechanism Mercury uses to provide declarative I/O.

We have not yet implemented unique modes fully, and the details are
still in a state of flux.  So the following should be considered
tentative.

In addition to the insts mentioned above (@samp{free}, @samp{ground},
and @samp{bound(@dots{})}), Mercury also provides ``unique'' insts
@samp{unique} and @samp{unique(@dots{})} which are like @samp{ground}
and @samp{bound(@dots{})} respectively, except that they carry the
additional constraint that there can only be one reference to the
corresponding value.  There is also an inst @samp{dead} which means
that there are no references to the corresponding value.
The following modes

@example
% unique output
:- mode uo :: free -> unique.

% unique input
:- mode ui :: unique -> unique.

% destructive input
:- mode di :: unique -> dead.
@end example

are also provided.

@node Determinism
@chapter Determinism

@section Determinism categories

For each mode of a predicate,
we categorise that mode according to how many times it can succeed,
and whether or not it can fail before producing its first solution.

@itemize @bullet
@item
If all calls to a particular mode of a predicate
have exactly one solution,
then that mode of the predicate is @dfn{deterministic} (@code{det}).

@item
If all calls to a particular mode of a predicate
either have no solutions or have one solution,
then that mode of the predicate is @dfn{semideterministic} (@code{semidet}).

@item
If all calls to a particular mode of a predicate
have at least one solution but may have more,
then that mode of the predicate is @dfn{multisolution} (@code{multi}).

@item
If some calls to a particular mode of a predicate have no solution
but other calls may have more than one solution,
then that mode of the predicate is @dfn{nondeterministic} (@code{nondet}).

@item
If all calls to a particular mode of a predicate
fail without producing a solution,
then that mode of the predicate has a determinism of @code{failure}.

@item
If all calls to a particular mode of a predicate
lead to a runtime error, i.e. neither succeed nor fail,
then that mode of the predicate has a determinism of @code{erroneous}.
@end itemize

To summarize:

@example
                Maximum number of solutions
Can fail?       0               1               > 1
no              erroneous       det             multi
yes             failure         semidet         nondet
@end example

The determinism of each mode of a predicate
is indicated by an annotation on the mode declaration.
For example:

@example
:- pred append(list(T), list(T), list(T)).
:- mode append(in, in, out) is det.
:- mode append(out, out, in) is multi.
:- mode append(in, in, in) is semidet.
@end example

If the mode of the predicate is given in the @code{:- pred} declaration
rather than in a separate @code{:- mode} declaration,
then the determinism annotation goes on the @code{:- pred} declaration.
In particular, this is necessary
if the predicate does not have any argument variables.
For example:

@example
:- pred loop(int::in) is erroneous.
loop(X) :- loop(X).

:- pred p is det.
p.

:- pred q is failure.
q :- fail.
@end example

The determinism categories form this lattice:

@example
             erroneous
              /     \
          failure   det
             \     /   \
             semidet    multi
                  \     /
                   nondet
@end example

The higher up this lattice a determinism category is,
the more the compiler knows about the number of solutions
of predicates of that determinism.

@section Determinism checking and inference

The determinism of goals
is inferred from the determinism of their component parts,
according to the rules below.
The inferred determinism of a procedure is just the inferred
determinism of the procedure's body.

For procedures that are local to a module,
the determinism annotations may be omitted;
in that case, their determinism will be inferred.
(To be precise, the determinism of procedures without a determinism annotation
is defined as the least fixpoint of the transformation which,
given an initial assignment
of the determinism @code{det} to all such procedures,
applies those rules to infer
a new determinism assignment for those procedures.)

It is an error to omit the determinism annotation
for procedures that are exported from their containing module.

If a determinism annotation is supplied for a predicate,
the declared determinism is compared against the inferred determinism.
If the declared determinism is greater than or not comparable to the
inferred determinism (in the partial ordering above), it is an error.
If the declared determinism is less than the inferred determinism,
it is not an error, but the implementation may issue a warning.

The determinism category of each goal
is inferred according to the following rules.
These rules work with the two components of determinism category:
whether the goal can fail without producing a solution,
and the maximum number of solutions of the goal (0, 1, or more).
If the inference process below reports that a goal can succeed more than once,
but the goal generates no outputs that are visible from outside the goal,
the final determinism of the goal
will be based on the goal succeeding at most once,
since the compiler will implicitly prune away any duplicate solutions.

@table @asis
@item Calls
The determinism category of a call is the determinism
declared or inferred for the called mode of the called predicate.

@item Unifications
The determinism of a unification
is either @code{det}, @code{semidet}, or @code{failure},
depending on its mode.

A unification that assigns the value of one variable to another
is deterministic.
A unification that constructs a structure and assigns it to a variable
is also deterministic.
A unification that tests whether a variable has a given top function symbol
is semideterministic,
unless the compiler knows the top function symbol of that variable,
in which case its determinism is either det or failure
depending on whether the two function symbols are the same or not.
A unification that tests two variables for equality
is semideterministic,
unless the compiler knows that the two variables are aliases for one another,
in which case the unification is deterministic,
or unless the compiler knows that the two variables
have different function symbols in the same position,
in which case the unification has a determinism of failure.

The compiler knows the top function symbol of a variable
if the previous part of the predicate definition
contains a unification of the variable with a function symbol,
or if the variable's type has only one function symbol.

@item Conjunctions
The determinism of the empty conjunction (the goal @samp{true})
is @code{det}.
The conjunction @samp{(@var{A}, @var{B})} can fail
if either @var{A} or @var{B} can fail.
The conjunction can succeed at most zero times
if either @var{A} or @var{B} can succeed at most zero times.
The conjunction can succeed more than once
if either @var{A} or @var{B} can succeed more than once
and both @var{A} and @var{B} can succeed at least once.
(If e.g. @var{A} can succeed at most zero times,
then even if @var{B} can succeed many times
the maximum number of solutions of the conjunction is still zero.)
Otherwise, i.e. if both @var{A} and @var{B} succeed at most once,
the conjunction can succeed at most once.

@item Switches
A disjunction is a @emph{switch}
if each disjunct has near its start a unification that
tests the same bound variable against a different function symbol.
For example, consider the common pattern

@example
(
        L = [], empty(Out)
;
        L = [H|T], nonempty(H, T, Out)
)
@end example

If L is input to the disjunction, then the disjunction is a switch on L.

A switch can fail
if the various arms of the switch do not cover
all the function symbols in the type of the switched-on variable,
or if the code in some arms of the switch can fail,
bearing in mind that in each arm of the switch,
the unification that tests the switched-on variable
against the function symbol of that arm is considered to be deterministic.
A switch can succeed several times
if some arms of the switch can succeed several times,
possibly because there are multiple disjuncts
that test the switched-on variable against the same function symbol.
A switch can succeed at most zero times
only if all arms of the switch can succeed at most zero times.

@item Disjunctions
The determinism of the empty disjunction (the goal @samp{fail})
is @code{failure}.
A disjunction @samp{(@var{A} ; @var{B})} that is not a switch
can fail if both @var{A} and @var{B} can fail.
It can succeed at most zero times
if both @var{A} and @var{B} can succeed at most zero times.
It can succeed at most once
if one of @var{A} and @var{B} can succeed at most once
and the other can succeed at most zero times.
Otherwise, i.e. if either @var{A} or @var{B} can succeed more than once,
or if both @var{A} and @var{B} can succeed at least once,
it can succeed more than once.

@c The local determinism of a disjunction is @code{nondet} unless the
@c compiler can detect that the disjunction is actually a switch and
@c hence @dfn{index} the disjunction.
@c Precisely describing the rules for detecting switches is somewhat tricky,
@c and I won't attempt to do so, but they are
@c reasonable easy to understand in practice.
@c The compiler can index on any input variable to a disjunction
@c (not just the first head variable).  It can also index on more than
@c one variable, since after indexing on the first one, switch detection is
@c applied to all sub-disjunctions.  It can index on any functor, not
@c just the top-most one.

@item If-then-else

If the condition of an if-then-else cannot fail, the if-then-else
is equivalent to the conjunction of the condition and the ``then'' part,
and its determinism is computed accordingly.
Otherwise, 
an if-then-else can fail if either the ``then'' part or the ``else'' part
can fail.
It can succeed at most zero times
if the ``else'' part can succeed at most zero times
and if at least one of the condition and the ``then'' part
can succeed at most zero times.
It can succeed more than once
if any one of the condition, the ``then'' part and the ``else'' part
can succeed more than once.

@item Negations

If the determinism of the negated goal is @code{erroneous},
then the determinism of the negation is @code{erroneous}.
If the determinism of the negated goal is @code{failure},
the determinism of the negation is @code{det}.
If the determinism of the negated goal is @code{det} or @code{multi},
the determinism of the negation is @code{failure}.
Otherwise, the determinism of the negation is @code{semidet}.

@end table

@subsection Replacing compile-time checking with run-time checking

Note that ``perfect'' determinism inference is an undecidable problem,
because it requires solving the halting problem.
(For instance, in the following example

@example
:- pred p(T, T).
:- mode p(in, out) is det.

p(A, B) :-
        (
                something_complicated(A, B)
        ;
                B = A
        ).
@end example

@noindent
@samp{p/0} can have more than one solution
only if @samp{something_complicated} can succeed.)
Sometimes, the rules specified by the Mercury language
for determinism inference will infer a determinism
that is not as precise as you would like.
However, it is generally easy to overcome such problems.
The way to do this is to replace the compiler's static checking
with some manual run-time checking.
For example, if you know that a particular goal should never fail,
but the compiler infers that goal to be @code{semidet},
you can check at runtime that the goal does succeed,
and if it fails, call the library predicate @samp{error/1}.

@example
:- pred q(T, T).
:- mode q(in, out) is det.

q(A, B) :-
        ( goal_that_should_never_fail(A, B0) ->
                B = B0
        ;
                error("goal_that_should_never_fail failed!")
        ).
@end example

@noindent
The predicate @code{error/1} has determinism @code{erroneous},
which means the compiler knows that it will never succeed or fail,
so the inferred determinism for the body of @code{q/2} is @code{det}.
(Checking assumptions like this is good coding style anyway.
The small amount of up-front work that Mercury requires
is paid back in reduced debugging time.)
Mercury's mode analysis knows that
computations with determinism erroneous can never succeed,
which is why it does not require the ``else'' part to generate
a value for @samp{B}.
The introduction of the new variable @samp{B0} is necessary
because the condition of an if-then-else is a negated context,
and can export the values it generates
only to the ``then'' part of the if-then-else,
not directly to the surrounding computation.
(If the surrounding computations had direct access
to values generated in conditions,
they might access them even if the condition failed.)

@subsection Interfacing nondeterministic code with the real world

Normally, attempting to call
a @code{nondet} or @code{multi} mode of a predicate
from a predicate declared as @code{semidet} or @code{det}
will cause a determinism error.
So how can we call nondeterministic code from deterministic code?
There are several alternative possibilities.

If you just want to see if a nondeterministic goal is satisfiable or not,
without needing to know what variable bindings it produces,
then there is no problem -
determinism analysis considers @code{nondet} and @code{multi} goals
with no non-local output variables to be
@code{semidet} and @code{det} respectively.

If you want to use the values of output variables,
then you need to ask yourself
which one of possibly many solutions to a goal do you want?
If you want all of them, you need to use the predicate
@samp{solutions/2} in the standard library module @samp{std_util},
which collects all of the solutions to a goal into a list --
see @xref{Higher-order}.

If you just want one solution and don't care which,
the calling predicate should be declared @code{nondet} or @code{multi}.
The nondeterminism should then be propagated up the call tree
to the point at which it can be pruned.
In Mercury, pruning can be achieved in several ways.

The first way is the one mentioned above:
if a goal has no non-local output variables
then the implementation will only attempt to satisfy the goal once.
Any potential duplicate solutions will be implicitly pruned away.

The second way is to rely on the fact that
the implementation will only seek a single solution to @samp{main/2},
so alternative solutions to @samp{main/2}
(and hence also to @code{nondet} or @code{multi} predicates
called directly or indirectly from @samp{main/2})
are implicitly pruned away.
This is one way to achieve ``don't care'' nondeterminism in Mercury.

The other situation in which you may want pruning
and committed choice style nondeterminism
is when you know that all the solutions returned will be equivalent.
For example, you might want to count the elements in a set
by removing them one at a time.
Removing an unspecified element from a set is a nondeterministic operation,
but no matter which order you remove them,
the computed size of the set should be the same.

We plan to eventually extend Mercury to allow users to write

@example
unique [X] Goal
@end example

@noindent
as a special quantifier, meaning
``there exists a unique @code{X} for which @samp{Goal} is true''.
This would allow the implementation
to prune alternative solutions for @samp{Goal}
if @samp{X} was the only output variable of @samp{Goal}.  

We would also like to allow users
to specify a user-defined equivalence relation
as the equality relation for user-defined types,
so that the @samp{unique} quantifier
could be used to express more general forms of equivalence.
For example, if you define a set type which represents sets as unsorted lists,
you would want to define a user-defined equivalence relation for that type,
which could sort the lists before comparing them.
The @samp{unique} quantifier could then be used for sets
even though the lists used to represent the sets
might not be in the same order in every solution.

However, the current implementation does not yet support
either the @samp{unique} quantifier or user-defined equivalence relations.

@node Higher-order
@chapter Higher-order programming

Mercury supports higher-order predicates with currying, closures, and
lambda expressions.  (To be pedantic, it would be more accurate to
say that Mercury supports higher-order procedures: in Mercury, when you
construct a higher-order predicate term, you only get one mode of
a predicate; if you want multiple modes, you must pass multiple
high-order procedures.)

@menu
* Creating higher-order terms::
* Calling higher-order terms::
* Higher-order modes::
@end menu

@node Creating higher-order terms
@section Creating higher-order terms

To create a higher-order predicate term, you can use
a lambda expression. Alternately, if the predicate has only one mode,
you can just use the name of a predicate.
For example, if you have declared a predicate

@example
:- pred sum(list(int), int).
:- mode sum(in, out) is det.
@end example

@noindent
the following two unifications have the same effect:

@example
@dots{}
X = lambda([List::in, Length::out] is det, sum(List, Length)),
Y = sum,
@dots{}
@end example

In the above example, the type of both @samp{X} and @samp{Y} is
@samp{pred(list(int), int)}, which means a predicate of two
arguments of types @samp{list(int)} and @samp{int} respectively.

If the predicate has more than one mode, you must use an explicit
lambda expression to specify which mode you want.

You can also create higher-order predicate terms by "currying",
i.e. specifying the first few arguments to a predicate, but leaving the
remaining arguments unspecified.  For example, the unification

@example
Sum123 = sum([1,2,3])
@end example

@noindent
binds @samp{Sum123} to a higher-order predicate term of type @samp{pred(int)}.

@node Calling higher-order terms
@section Calling higher-order terms

Once you have created a higher-order predicate term (sometimes known
as a closure), the next thing you want to do is to call it.  
For this, you use the builtin call/N:

@table @asis
@item @code{call(Closure)}
@itemx @code{call(Closure1, Arg1)}
@itemx @code{call(Closure2, Arg1, Arg2)}
@itemx @code{call(Closure3, Arg1, Arg2, Arg3)}
@itemx @dots{}
A higher-order predicate call.  @samp{call(Closure)} just calls
the specified closure.  The other forms append the specified
arguments onto the argument list of the closure before calling it.
@end table

For example, the call

@example
call(Sum123, Result)
@end example

@noindent
would bind @samp{Result} to the sum of @samp{[1, 2, 3]}, i.e. to 6.

The current implementation has the extremely unfortunate
limitation that there can be at most three additional arguments; thus
@samp{call(Pred, Arg1, Arg2, Arg3, Arg4)} and beyond are not yet supported.
The current implementation also has the limitation that for higher-order
pred terms, all input arguments must precede all output arguments.

One extremely useful higher-order predicate in the Mercury standard
library is @code{solutions/2}, which has the following declaration:

@example
:- pred solutions(pred(T), list(T)).
:- mode solutions(pred(out) is nondet, out) is det.
@end example

The term which you pass to @samp{solutions/2} is a higher-order
predicate term.  You can pass the name of a one-argument predicate,
or you can pass a several-argument predicate with all but one
of the arguments supplied (a closure).  The declarative semantics of
@samp{solutions/2} can be defined as follows:

@example
solutions(Pred, List) is true iff
        all [X] (call(Pred, X) <=> list__member(X, List))
        and List is sorted.
@end example

@noindent
where @samp{call(Pred, X)} is a call to the standard library predicate
@samp{call/2} which invokes the higher-order predicate term @samp{Pred}
with argument @samp{X}, and where @samp{list__member/2} is the standard
library predicate for list membership.  In other words,
@samp{solutions(Pred, List)} finds all the values of @samp{X}
for which @samp{call(Pred, X)} is true, collects these solutions
in a list, sorts the list, and returns that list as its result.
Here's an example: the standard library defines a predicate
@samp{list__perm(List0, List)}

@example
:- pred list__perm(list(T), list(T)).
:- mode list__perm(in, out) is nondet.
@end example

@noindent
which succeeds iff List is a permutation of List0.
Hence the following call to solutions

@example
solutions(list__perm([3,1,2]), L)
@end example

@noindent
should return all the possible permutations of the list @samp{[3,1,2]}
in sorted order:

@example
L = [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]].
@end example

@node Higher-order modes
@section Higher-order modes

The language contains builtin @samp{inst} values

@example
pred is @var{Determinism}
pred(@var{Mode}) is @var{Determinism}
pred(@var{Mode1}, @var{Mode2}) is @var{Determinism}
@dots{}
@end example

These insts represent the instantiation state of variables bound
to higher-order predicate terms with the appropriate mode and determinism.
For example, @samp{pred(out) is det} represents the instantion state
of being bound to a higher-order predicate term which is @samp{det}
and accepts one output argument; the term @samp{sum([1,2,3])} from the
example above is one such higher-order predicate term which matches
this instantiation state.

As a convenience, the language also contains builtin @samp{mode} values
of the same name (and they are what we have been using in the examples
up to now).  These modes map from the corresponding @samp{inst} to
itself.  It is as if they were defined by

@example
:- mode (pred is @var{Determinism}) :: in(pred is @var{Determinism}).
:- mode (pred(@var{Inst}) is @var{Determinism}) ::
    in(pred(@var{Inst}) is @var{Determinism}).
@dots{}
@end example

@noindent
using the parametric inst @samp{in/1} mentioned in @xref{Modes}
which maps an inst to itself.

If you want to define a predicate which returns a higher-order predicate
term, you would use a mode such as @samp{free -> pred(@dots{}) is @dots{}},
or @samp{out(pred(@dots{}) is @dots{})}.  For example:

@example
:- pred foo(pred(int)).
:- mode foo(free -> pred(out) is det) is det.

foo(sum([1,2,3])).
@end example

Note that in Mercury it is an error to attempt to unify two
higher-order predicate terms.  This is because equivalence of
higher-order predicates is undecideable in the general case.

For example, given the definition of @samp{foo} above, the goal

@example
        foo(lambda([X::out] is det, X = 6))
@end example

@noindent
is illegal.  If you really want to compare higher-order predicates
for equivalence, you must program it yourself; for example,
the above goal could legally be written as

@example
        P = lambda([X::out] is det, X = 6),
        foo(Q),
        all [X] (call(P, X) <=> call(Q, X)).
@end example

Note that the compiler will only catch direct attempts at higher-order
unifications; indirect attempts (via polymorphic predicates, for
example @samp{(list__append([], [P], [Q])} may result in an error at
run-time rather than at compile-time.

@node Modules
@chapter Modules

The Mercury module system is simple and straightforward. 
Each module must start with a @code{module} declaration,
specifying the name of the module. 
An @code{interface} declaration specifies
the start of the module's interface section:
this section contains declarations for the types, function symbols,
instantiation states, modes, and predicates exported by this module.
Mercury provides support for abstract data types,
since the definition of a type may be kept hidden,
with only the type name being exported.  
An @code{implementation} declaration specifies
the start of the module's implementation section. 
Any entities declared in this section are local to the module
and cannot be used by other modules.
The implementation section must of course contain definitions
for all abstract data types and predicates exported by the module,
as well for all local types and predicates.
The module may optionally end with an @code{end_module} declaration.

@c XXX should we mention multipart interfaces and implementations?

If a module wishes to make use of entities exported by other modules,
then it must explicitly import those modules
using one or more @code{import_module} declarations.
These declarations may occur
either in the interface or the implementation section.
If the imported entities are used in the interface section,
then the corresponding @code{import_module} declaration must
also be in the interface section.  If the imported entities are only
used in the implementation section, the @code{import_module}
declaration should be in the implementation section.

One module must export a predicate @samp{main}, which
must be declared as either

@example
:- pred main(io__state::di, io__state::uo) is det.
@end example

@noindent
or

@example
:- pred main(io__state::di, io__state::uo) is multi.
@end example

@noindent
(or any declaration equivalent to one of the two above).

For example, here is the definition of a simple module for managing queues:

@example
:- module queue.
:- interface.

% Declare an abstract data type.

:- type queue(T).

% Declare some predicates which operate on the abstract data type.

:- pred empty_queue(queue(T)).
:- mode empty_queue(out) is det.
:- mode empty_queue(in) is semidet.

:- pred put(queue(T), T, queue(T)).
:- mode put(in, in, out) is det.

:- pred get(queue(T), T, queue(T)).
:- mode get(in, out, out) is semidet.

:- implementation.

% Queues are implemented as lists. We need the `list' module
% for the declaration of the type list(T), with its constructors
% '[]'/0 % and '.'/2, and for the declaration of the predicate
% list__append/3.

:- import_module list.

% Define the queue ADT.

:- type queue(T) == list(T).

% Declare the exported predicates.

empty_queue([]).

put(Queue0, Elem, Queue) :-
         list__append(Queue0, [Elem], Queue).

get([Elem | Queue], Elem, Queue).

:- end_module queue.

@end example

Mercury has a standard library which includes modules for
lists, stacks, queues, priority queues, sets, bags (multi-sets),
maps (dictionaries), random number generation, input/output
and filename and directory handling. 
See the Mercury Library Reference Manual for details.

@node Semantics
@chapter Semantics

A legal Mercury program is one that complies with the syntax,
type, mode, determinism, and module system rules specified in earlier chapters.
If a program does not comply with those rules,
the compiler must report an error.

For each legal Mercury program,
there is an associated predicate calculus theory
whose language is specified by the type declarations in the program
and whose axioms are the completion of all predicates in the program
plus the usual equality axioms.
The declarative semantics of a legal Mercury program
is specified by this theory.
Mercury implementations must be sound:
the answers they compute must be true in every model of the theory.

Execution of a legal Mercury program begins with the predicate @samp{main/2}.
Only one solution is sought, even if @samp{main/2} is declared as @code{multi}.

@contents
@bye
