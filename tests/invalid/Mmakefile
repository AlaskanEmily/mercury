#-----------------------------------------------------------------------------#

main_target: check

include ../Mmake.common
-include ../Mmake.params

#-----------------------------------------------------------------------------#

# Note: multi-module tests (including tests of nested modules)
# also need to be listed below, in the .depend list, as well as here.

SOURCES= \
	aditi_update_errors.m \
	aditi_update_mode_errors.m \
	any_mode.m \
	assert_in_interface.m \
	bigtest.m \
	bind_var_errors.m \
	builtin_int.m \
	builtin_proc.m \
	circ_type.m \
	constructor_warning.m \
	det_errors.m \
	duplicate_modes.m \
	errors.m \
	errors1.m \
	errors2.m \
	external.m \
	ext_type_bug.m \
	func_errors.m \
	funcs_as_preds.m \
	ho_type_mode_bug.m \
	ho_unique_error.m \
	impure_method_impl.m \
	inline_conflict.m \
	inst_list_dup.m \
	io_in_ite_cond.m \
	missing_det_decls.m \
	missing_interface_import.m \
	modes_erroneous.m \
	mostly_uniq1.m \
	mostly_uniq2.m \
	multisoln_func.m \
	nested_impl_in_int.m \
	no_exports.m \
	not_a_switch.m \
	nullary_ho_func_error.m \
	occurs.m \
	partial_implied_mode.m \
	polymorphic_unification.m \
	pragma_c_code_and_clauses1.m \
	pragma_c_code_and_clauses2.m \
	pragma_c_code_dup_var.m \
	pragma_c_code_no_det.m \
	predmode.m \
	prog_io_erroneous.m \
	qual_basic_test2.m \
	qualified_cons_id2.m \
	record_syntax_errors.m \
	some.m \
	spurious_mode_error.m \
	test_nested.m \
	tricky_assert1.m \
	type_inf_loop.m \
	type_loop.m \
	type_mismatch.m \
	typeclass_test_1.m \
	typeclass_test_2.m \
	typeclass_test_3.m \
	typeclass_test_4.m \
	typeclass_test_5.m \
	typeclass_test_7.m \
	typeclass_test_9.m \
	types.m	\
	type_spec.m \
	unbound_inst_var.m \
	undef_lambda_mode.m \
	undef_mode.m \
	undef_mod_qual.m \
	undef_symbol.m \
	undef_type.m \
	unify_mode_error.m \
	uniq_modes.m \
	uniq_neg.m \
	uu_type.m \
	vars_in_wrong_places.m

# we do not yet pass the following tests:
#	parent.undeclared_child.m (just not yet implemented)
#	sub_b.m and sub_c.m (bug with dependencies & nested modules)
#	freefree.m 	(need bromage's aliasing stuff)
#	typeclass_test_8.m (minor formatting error in the output --
#			the type class name should be in quotes;
#			also a software_error)

MCFLAGS-aditi_update_errors =	--aditi
MCFLAGS-aditi_update_mode_errors = --aditi
MCFLAGS-any_mode	=	--infer-types
MCFLAGS-duplicate_modes	=	--verbose-error-messages
MCFLAGS-missing_det_decls = --no-infer-det
MCFLAGS-missing_interface_import = --make-interface
MCFLAGS-multisoln_func	=	--infer-types
MCFLAGS-no_exports = 		--halt-at-warn
MCFLAGS-sub_c = 		--verbose-error-messages
MCFLAGS-record_syntax_errors =	--verbose-error-messages

# The bug is caught when generating dependencies, so it is
# easiest just to do that step.
MCFLAGS-nested_impl_in_int =	--generate-dependencies

DEPS=		$(SOURCES:%.m=%.dep)
DEPENDS=	$(SOURCES:%.m=%.depend)
ERRS=		$(SOURCES:%.m=%.err)
ERR_RESS=	$(SOURCES:%.m=%.err_res)

%.err: %.m
	if $(MC) $(ALL_MCFLAGS) --errorcheck-only $* > $*.err 2>&1; \
	then false; else true; fi

# Some tests have more than one possible valid output, so
# we allow the test to pass if it matches *either* the .err_exp
# or the .err_exp2 file. 
%.err_res: %.err %.err_exp
	-rm -f $@
	diff -c $*.err_exp $*.err > $@ || \
		{ [ -f $*.err_exp2 ] && diff -c $*.err_exp2 $*.err > $@; }

all:	check

check:	$(ERRS) $(ERR_RESS)

errs:	$(ERRS)

# We only need to make the dependencies for test cases consisting of
# multiple modules; currently the following are the only such cases.
depend:	aditi_update_errors.depend aditi_update_mode_errors.depend \
		test_nested.depend partial_implied_mode.depend \
		undef_mod_qual.depend

clean_local:
	rm -f *.err *.err_res

#-----------------------------------------------------------------------------#
