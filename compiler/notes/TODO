codegen.nl
----------

- semideterministic and nondeterministic code generation

- types with constants only (enumerations) should be handled as ints.

- The generated code should include some profiling hooks.
  In particular, we should add a version of the heap allocation
  macro which takes an extra string parameter identifying which
  routine allocated the memory.  Then we can do heap-allocation
  profiling to identify which routines use up all the bloody memory.

- Generate constant compound terms at compile time rather than at runtime.

mercury_to_goedel.nl
--------------------

- see comments at the start of that file

typecheck.nl
------------

- fix bug with synchronization of typevarsets

- improve error messages

other
-----

- warn about predicates with no clauses.

- warn about predicates with no modes.

- handle abstract modes in the same way abstract types are handled

- report an error if there are clauses in the interface section
  of a module

- replace all instances of term_functor, term_atom, term_string, term_float,
  term_int, term_variable with term__functor, term__atom, term__string,
  term__float, term__variable respectively.

- mode anaylsis (see ~fjh/thesis/strep/ for details)

- determinism analysis 

- warn about singleton variables

- warn about multiple occurrences of variables whose name starts with
  underscore.

- improve efficiency of implicit quantification

- renaming apart of different occurences
  of the same variable; warning about variables which occur in
  overlapping scopes.

- optimization of various sorts

- write a pass over hlds to recognize the builtin predicates,
  including arithmetic predicates such as "+" and arithmetic tests
  such as "<", and ensure that codegen outputs the correct code
  for these builtins.

- generate code for complicated_unify's (there are some comments about
  this in the paper.)

- array.nl: write a predicate to resize arrays.

- better error handling

- fix all the `XXX's, `xxx's, `YYY's and `%%%'s.

WISH LIST
---------

- handle module qualifiers properly

- more work on module system & seperate compilation

- implement user-defined operators:
	Add a new construct `:- op(Pred, Type, Op).' as in Prolog;
	change prog_io.nl to parse this construct and call io__op
	accordingly.

