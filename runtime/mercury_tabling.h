/*
** Copyright (C) 1997-1998 The University of Melbourne.
** This file may only be copied under the terms of the GNU Library General
** Public License - see the file COPYING.LIB in the Mercury distribution.
*/

/*
** mercury_tabling.h - definitions of some basic macros used by the tabling
** code generated by the Mercury compiler and by the Mercury runtime.
*/

#ifndef MERCURY_TABLING_H
#define MERCURY_TABLING_H

#undef MR_TABLE_DEBUG

typedef Word ** TrieNode;
typedef Word ** AnswerBlock;


#include "mercury_table_enum.h"
#include "mercury_table_any.h"
#include "mercury_table_type_info.h"
#include "mercury_table_builtins.h"


#define MR_TABLE_WORD(Table, Value)					\
	MR_int_hash_lookup_or_add(Table, (Integer)Value);

#define MR_TABLE_INT(Table, Value)					\
	MR_int_hash_lookup_or_add(Table, Value);

#define MR_TABLE_FLOAT(Table, Value)		  			\
	MR_float_hash_lookup_or_add(Table, Value);

#define MR_TABLE_CHAR(Table, Value)		   			\
	MR_int_hash_lookup_or_add(Table, (Integer)Value);

#define MR_TABLE_STRING(Table, Value)		 			\
	MR_string_hash_lookup_or_add(Table, (String)Value);
	
#define MR_TABLE_ENUM(Table, Range, Value)                              \
	MR_int_index_lookup_or_add(Table, Value, Range)

#define MR_TABLE_TAG(Table, Tag)					\
	MR_int_index_lookup_or_add(Table, Tag, 1 << TAGBITS)

#define MR_TABLE_TYPE_INFO(Table, Type)					\
	MR_type_info_lookup_or_add(Table, (Word*) Type)
	
#define MR_TABLE_ANY(Table, TypeInfo, Value)		  		\
	MR_table_type((Word*)TypeInfo, Value, Table)

#define MR_TABLE_CREATE_ANSWER_BLOCK(ABlock, Elements)	 		\
	do {								\
		*((AnswerBlock) ABlock) = 				\
			(Word *) table_allocate(sizeof(Word)*Elements);	\
	} while(0)

#define MR_TABLE_GET_ANSWER(Offset, ABlock)				\
	(*((AnswerBlock)ABlock))[Offset]


#ifdef CONSERVATIVE_GC

  #define MR_TABLE_SAVE_ANSWER(Offset, ABlock, Value, TypeInfo)		\
	do {								\
		(*((AnswerBlock)ABlock))[Offset] = Value;		\
	} while(0)

#else /* not CONSERVATIVE_GC */

  #define MR_TABLE_SAVE_ANSWER(Offset, ABlock, Value, TypeInfo)		\
	do {								\
	   	save_transient_registers();				\
		{ Word local_val = Value;				\
		(*((AnswerBlock)ABlock))[Offset] = 			\
			deep_copy(&local_val, (Word *) (Word) &TypeInfo,\
				NULL, NULL);				\
		}							\
		restore_transient_registers();		  		\
	} while(0)

#endif /* CONSERVATIVE_GC */


#ifdef CONSERVATIVE_GC

  #define table_allocate(size)						\
	GC_MALLOC(size)

  #define table_reallocate(pointer, size)				\
	GC_REALLOC(pointer, size)

  #define table_free(pointer)						\
	GC_FREE(pointer)

  #define MR_table_list_cons(h, t) list_cons((h),(t))

#else /* not CONSERVATIVE_GC */

  #define table_allocate(Size)						\
	(fatal_error("Sorry, not implemented: tabling in non-GC grades"), \
	(void *) NULL)
  #define table_reallocate(Pointer, Size)				\
	(fatal_error("Sorry, not implemented: tabling in non-GC grades"), \
	(void *) NULL)
  #define table_free(Pointer)						\
	fatal_error("Sorry, not implemented: tabling in non-GC grades")

  #define MR_table_list_cons(h, t)					\
	(fatal_error("Sorry, not implemented: tabling in non-GC grades"), \
	(Word)0)

#endif /* CONSERVATIVE_GC */

#define table_copy_mem(Dest, Source, Size)				\
	memcpy(Dest, Source, Size)

#endif /* not MERCURY_TABLING_H */
