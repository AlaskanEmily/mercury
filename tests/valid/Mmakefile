#-----------------------------------------------------------------------------#

THIS_DIR = valid

#-----------------------------------------------------------------------------#

# please keep these lists sorted
AGC_PROGS= \
	agc_graph \
	agc_ho_pred \
	agc_ite \
	agc_unbound_typevars \
	agc_unbound_typevars2 \
	agc_unused_in 

TRAIL_PROGS= \
	complex_failure \
	semi_fail_in_non_ite

TYPECLASS_PROGS= \
	abstract_typeclass \
	constraint_proof_bug \
	func_method \
	instance_superclass \
	instance_unconstrained_tvar \
	repeated_class_constraint \
	typeclass_det_warning

ADITI_PROGS= \
	aditi_error_bug \
	aditi_update \
	base_relation \
	base_relation2 \
	context_anc \
	ite_to_disj

	# This test is compiled with --no-special-preds,
	# which doesn't work in jump.* and fast.* grades.
NO_SPECIAL_PREDS_PROGS= \
	unify_typeinfo_bug

	# This test does not produce a `.c' file.
RLO_PROGS= \
	aditi_query

	# Tests for which we should only produce a `.il' file.
IL_PROGS = \
	foreign_type_spec

OTHER_PROGS= \
	any_inst_merge \
	common_struct_bug \
	compl_unify_bug \
	complicated_unify \
	constrained_poly_bound_arg \
	constrained_poly_insts \
	constructor_arg_names \
	dcg_test \
	deforest_bug \
	deforest_loop \
	deforest_rerun_det \
	det_condition \
	det_inference \
	det_switch \
	double_vn \
	easy_nondet_test \
	easy_nondet_test_2 \
	empty_bound_inst_list \
	empty_switch \
	error \
	existential_cons \
	explicit_quant \
	fail_ite \
	followcode_det_problem \
	foreign_underscore_var \
	func_int_bug_main \
	func_default_modes \
	headvar_not_found \
	higher_order \
	higher_order2 \
	higher_order3 \
	higher_order_implied_mode \
	ho_func_call \
	ho_inst \
	ho_unify \
	implied_mode \
	indexing \
	inhibit_warn_test \
	inlining_bug \
	inst_perf_bug_1 \
	int64 \
	intermod_dcg_bug \
	intermod_impure \
	intermod_lambda \
	intermod_nested_module \
	intermod_nested_module_bug \
	intermod_nested_uniq \
	intermod_pragma_import \
	intermod_quote \
	intermod_record \
	intermod_test \
	intermod_typeclass \
	intermod_type_spec \
	intermod_user_equality \
	intermod_user_equality_nested \
	lambda_inference\
	lambda_instmap_bug \
	lambda_output \
	lambda_quant \
	lambda_quant_bug \
	lambda_recompute \
	lambda_struct_bug \
	lambda_switch \
	lambda_type \
	lazy_list \
	liveness_nonlocals \
	livevals_seq \
	loop \
	loop_in_disj \
	merge_ground_any \
	middle_rec_labels \
	modes_bug \
	mode_syntax \
	module_a \
	module_b \
	module_c \
	module_d \
	module_e \
	mostly_uniq_bug \
	mostly_uniq_neg \
	mostly_uniq_mode_inf \
	multidet_prune1 \
	multidet_test \
	nasty_func_test \
	nested_mod_type_bug \
	nondet_live \
	parsing_bug_main \
	pred_with_no_modes \
	qualified_cons_id \
	quantifier_warning \
	record_syntax_bug \
	record_syntax_bug_2 \
	record_syntax_bug_3 \
	record_syntax_bug_4 \
	record_syntax_bug_5 \
	recursive_no_tag_type \
	same_length_2 \
	semidet_disj \
	shape_type \
	simplify_bug \
	simplify_bug2 \
	soln_context \
	some_switch \
	spurious_purity_warning \
	stack_alloc \
	static \
	subtype_switch \
	switch_detection_bug \
	switch_detection_bug2 \
	switches \
	tabled_io \
	tabled_for_io \
	transitive_instance \
	tricky_assert2 \
	tricky_ite \
	tuple_eqv \
	two_pragma_c_codes \
	two_way_unif \
	typeclass_inlining_bug \
	type_inf_ambig_test \
	unbound_inst_var \
	unbound_tvar_in_lambda \
	undead_proc \
	uniq_unify \
	uniq_mode_inf_bug \
	unreachable_code \
	unused_args_test2 \
	vn_float \
	zero_arity

# XXX The mode system can't handle the following test cases yet:
#	assoc_list_bug
#	determinism
#	mode_merge_insts
#	inst_perf_bug_2
#
# XXX We also don't pass this one (see the comments in it for details):
#	mode_selection

# The agc.* tests don't yet work in --high-level-code grades.
ifneq "$(findstring hl,$(GRADE))" ""
	PROGS0 = $(TYPECLASS_PROGS) $(OTHER_PROGS)
else
	PROGS0 = $(AGC_PROGS) $(TYPECLASS_PROGS) $(OTHER_PROGS)
endif

# Base grades `jump' and `fast'
# cannot be used with `--no-special-preds'

ifneq "$(findstring asm_,$(GRADE))" ""
    PROGS1=$(NO_SPECIAL_PREDS_PROGS) $(PROGS0)
else
    ifneq "$(findstring jump,$(GRADE))" ""
        PROGS1=$(PROGS0)
    else
        ifneq "$(findstring fast,$(GRADE))" ""
            PROGS1=$(PROGS0)
        else
	    PROGS1=$(NO_SPECIAL_PREDS_PROGS) $(PROGS0)
        endif
    endif
endif

ifneq "$(findstring .mm,$(GRADE))" ""
    PROGS2=$(PROGS1)
else
    PROGS2=$(PROGS1) $(TRAIL_PROGS)
endif

# Aditi is not yet implemented for the MLDS back-end
# (i.e. grades hl*).
# It will never be implemented for deep profiling grades.
ifneq "$(findstring hl,$(GRADE))$(findstring profdeep,$(GRADE))" ""
    OBJ_PROGS=$(PROGS2)
else
    OBJ_PROGS=$(PROGS2) $(ADITI_PROGS)
endif

ifneq "$(findstring profdeep,$(GRADE))" ""
	ALL_RLO_PROGS =
else
	ALL_RLO_PROGS = $(RLO_PROGS)
endif

PROGS = $(OBJ_PROGS) $(ALL_RLO_PROGS) $(IL_PROGS)

# `mmc --make' doesn't expect subdirectories to appear in targets.
ifeq ($(MMAKE_USE_MMC_MAKE),yes)
OS_SUBDIR=
RLOS_SUBDIR=
ILS_SUBDIR=
else
OS_SUBDIR=$(os_subdir)
RLOS_SUBDIR=$(rlos_subdir)
ILS_SUBDIR=$(ils_subdir)
endif

OBJS =	$(OBJ_PROGS:%=$(OS_SUBDIR)%.$O) \
		$(ALL_RLO_PROGS:%=$(RLOS_SUBDIR)%.rlo) \
		$(IL_PROGS:%=$(ILS_SUBDIR)%.il)

#-----------------------------------------------------------------------------#

TESTS = $(PROGS)
SUBDIRS=
TESTS_DIR=..
include $(TESTS_DIR)/Mmake.common

# When compiling using the installed libraries, setting GRADEFLAGS may
# may cause mgnuc to look for the `.mih' files for a non-installed grade.
# test_mercury runs the tests using the installed libraries, so GRADEFLAGS
# won't be set, but test_mercury runs the tests in at least one `.tr' grade
# on all machines, so it isn't a problem.
ifneq ($(origin WORKSPACE),undefined)
GRADEFLAGS_TRAIL = --use-trail
else
GRADEFLAGS_TRAIL =
endif
# Make sure GRADEFLAGS_TRAIL is passed to `mmc --make'.
export GRADEFLAGS_TRAIL

# Module-specific options should go in Mercury.options so they
# can be found by `mmc --make'.
include Mercury.options

$(OBJ_PROGS:%=%.runtest): %.runtest: %.$O ;

$(ALL_RLO_PROGS:%=%.runtest): %.runtest: %.rlo ;

$(IL_PROGS:%=%.runtest): %.runtest: %.il ;

#-----------------------------------------------------------------------------#

# XXX mmake should automatically handle these two dependencies.
$(dates_subdir)intermod_nested_module2.date: \
	$(date0s_subdir)intermod_nested_module2.date0
$(dates_subdir)intermod_user_equality_nested2.date: \
	$(date0s_subdir)intermod_user_equality_nested2.date0

objs:	$(OBJS)

printtests:
	@echo $(PROGS)

printobjs:
	@echo $(OBJS)

clean_local:
	rm -f *.err *.h

#-----------------------------------------------------------------------------#
