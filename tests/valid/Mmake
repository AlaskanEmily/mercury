#-----------------------------------------------------------------------------#

main_target: all

include ../Mmake.common

#-----------------------------------------------------------------------------#

SOURCES= \
	compl_unify_bug.m \
	complicated_unify.m \
	constructor_arg_names.m \
	dcg_test.m \
	det_condition.m \
	det_inference.m \
	det_switch.m \
	easy_nondet_test.m \
	easy_nondet_test_2.m \
	empty_switch.m \
	error.m \
	followcode_det_problem.m \
	headvar_not_found.m \
	higher_order.m \
	higher_order2.m \
	higher_order3.m \
	implied_mode.m \
	indexing.m \
	intermod_lambda.m \
	lambda_inference.m\
	lambda_quant.m \
	lambda_switch.m \
	lambda_type.m \
	loop.m \
	loop_in_disj.m \
	middle_rec_labels.m \
	modes_bug.m \
	multidet_prune1.m \
	multidet_test.m \
	nasty_func_test.m \
	nondet_live.m \
	qualified_cons_id.m \
	same_length_2.m \
	semidet_disj.m \
	shape_type.m \
	simplify_bug.m \
	soln_context.m \
	stack_alloc.m \
	subtype_switch.m \
	switches.m \
	two_pragma_c_codes.m \
	two_way_unif.m \
	undead_proc.m \
	uniq_unify.m \
	unreachable_code.m \
	unused_args_test2.m \
	vn_float.m

# The mode system can't handle the following test cases yet:
#	assoc_list.m
#	determinism.m
#	mode_merge_insts.m

OBJS =	$(SOURCES:%.m=%.o)
NOS =	$(SOURCES:%.m=%.no)
PROGS =	$(SOURCES:%.m=%)

all:	objs

# we need to pass some options to really test middle_rec_labels.m
middle_rec_labels.c: middle_rec_labels.m
	$(MCG) --grade $(GRADE) $(MCGFLAGS) --middle-rec --no-follow-vars \
		middle_rec_labels.m > middle_rec_labels.err 2>&1

two_way_unif.c: two_way_unif.m
	$(MCG) --grade $(GRADE) $(MCGFLAGS) -O-1 two_way_unif.m \
		> two_way_unif.err 2>&1

# The bug that simplify_bug.m tests for only occurred at -O-1
simplify_bug.c:	simplify_bug.m
	$(MCG) --grade $(GRADE) $(MCGFLAGS) -O-1 \
		simplify_bug.m > simplify_bug.err 2>&1

compl_unify_bug.c: compl_unify_bug.m
	$(MCG) --grade $(GRADE) $(MCGFLAGS) -O3 \
		compl_unify_bug.m > compl_unify_bug.err 2>&1

vn_float.c: vn_float.m
	$(MCG) --grade $(GRADE) $(MCGFLAGS) -O5 vn_float.m > vn_float.err 2>&1

# intermod_lambda.m needs inter-module optimization
intermod_lambda.c:
	$(MCI) --grade $(GRADE) $(MCIFLAGS) intermod_lambda2.m
	$(MCOI) --grade $(GRADE) $(MCOIFLAGS) intermod_lambda2.m
	$(MCG) --grade $(GRADE) $(MCGFLAGS) --intermodule-optimization \
		intermod_lambda.m

check:	objs

objs:	$(OBJS)

depend:

printtests:
	@echo $(PROGS)

clean:
	rm -f *.c *.o *.err2 *.d *.h

#-----------------------------------------------------------------------------#
