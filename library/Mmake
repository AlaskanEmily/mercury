#-----------------------------------------------------------------------------#

# Makefile.main - this is the main part of the Makefile
# for building the Mercury libraries.

MERCURY_DIR=..
include ../Mmake.common

MAIN_TARGET=mercury

#-----------------------------------------------------------------------------#

# Specify which compilers to use to compile the library.
# Don't change these without good reason - if you want to
# do a temporary change, change ../Mmake.params.

MNC	=	MERCURY_NC_BUILTIN="`vpath_find nc_builtin.nl`" mnc
MNL	=	MERCURY_LIB_DIR=. \
	MERCURY_LIB_NOS="`vpath_find $(library.nos) $(NU_LIBRARY_NOS)`" \
		mnl

MSC	=	MERCURY_SISCTUS_COMPILER=./sicstus_compile msc
MSL	=	MERCURY_SP_LIB_DIR=. MERCURY_SICSTUS_PROLOG=sp \
MERCURY_SP_LIB_OBJS="`vpath_find sp_builtin.ql $(library.qls) $(NU_LIBRARY_QLS)`" \
		msl

MCD	=	MERCURY_INT_DIR=. \
		MERCURY_C_INCL_DIR=$(RUNTIME_DIR) $(MC) --generate-dependencies
MCI	=	MERCURY_INT_DIR=. \
		MERCURY_C_INCL_DIR=$(RUNTIME_DIR) $(MC) --make-interface
MCG	=	MERCURY_INT_DIR=. \
		MERCURY_C_INCL_DIR=$(RUNTIME_DIR) $(MC) --generate-code
MGNUC	=	MERCURY_C_INCL_DIR=$(RUNTIME_DIR) mgnuc
MGNUCFLAGS =	-I $(BOEHM_GC_DIR)
MOD2INIT =	MERCURY_MOD_LIB_DIR=$(RUNTIME_DIR) \
		MERCURY_MOD_LIB_MODS="$(SYS_MODS)" \
		mod2init

#-----------------------------------------------------------------------------#

NU_LIBRARY_NOS = \
	io.nu.no require.nu.no std_util.nu.no string.nu.no term_io.nu.no \
	mercury_builtin.nu.no
NU_LIBRARY_QLS = \
	io.nu.ql require.nu.ql std_util.nu.ql string.nu.ql term_io.nu.ql \
	mercury_builtin.nu.ql sp_lib.ql

#-----------------------------------------------------------------------------#

# targets

.PHONY: all
all : ints mercury nuprolog sicstus

.PHONY: mercury
mercury : ints libmercury

.PHONY: nuprolog
nuprolog : ints library.nu $(library.nos) $(NU_LIBRARY_NOS) \
			nc_builtin.nl np_builtin.nl

.PHONY: sicstus
sicstus : ints sicstus_compile library.sicstus.debug

#-----------------------------------------------------------------------------#

.PHONY: depend
depend		: library.depend

.PHONY: check
check		: library.check

.PHONY: ints 
ints		: library.ints

.PHONY: mods
mods		: library.mods
library.mods	: $(library.mods)

#-----------------------------------------------------------------------------#

tags		: $(library.srcs)
	mtags $(library.srcs)

library.stats : ../compiler/source_stats.awk $(library.srcs)
	awk -f ../compiler/source_stats.awk \
		`vpath_find $(library.srcs)` > $@
	
#-----------------------------------------------------------------------------#

.PHONY: dates
dates		:
	touch $(library.dates)

#-----------------------------------------------------------------------------#

.PHONY: os cs
os: $(library.os)
cs: $(library.cs)

library.pic_os=$(library.os:.o=.pic_o)

#-----------------------------------------------------------------------------#

.PHONY: libmercury
libmercury : libmercury.a libmercury.so

libmercury.a : $(library.os)
	ar cr libmercury.a $(library.os)
	$(RANLIB) libmercury.a

libmercury.so : $(library.pic_os)
	$(MGNUC) $(MGNUCFLAGS) -shared -o libmercury.so $(library.pic_os)

#-----------------------------------------------------------------------------#

# we need to add some manual dependencies, since the
# automatic dependencies assume that the library
# isn't part of the application, but in this case it is.

library.nu library.nu.debug: $(NU_LIBRARY_NOS)
library.sicstus library.sicstus.debug: $(NU_LIBRARY_QLS)

library.nu.debug: error.no debug.no
library.sicstus.debug: error.ql

#-----------------------------------------------------------------------------#

sicstus_compile: sp_builtin.pl
	{ echo "on_exception(Error, (				"; \
	  echo "  prolog_flag(compiling, _, fastcode),		"; \
	  echo "  compile(sp_builtin),				"; \
	  echo "  garbage_collect,				"; \
	  echo "  save('$@', 1),				"; \
	  echo "  unix(argv(Args)),				"; \
	  echo "  ( Args = [CompileMode|Files] ->		"; \
	  echo "      prolog_flag(compiling, _, CompileMode),	"; \
	  echo "      fcompile(Files)				"; \
	  echo "  ; true )					"; \
	  echo "), print_message(error, Error)), halt ; halt.	"; \
	} | $(SP)

#-----------------------------------------------------------------------------#

CHGRP=mercury
CHMOD=go+w

# Installation targets

.PHONY: install
install: install_mercury

.PHONY: install_all
install_all: install_mercury install_nuprolog install_sicstus

.PHONY: install_mercury
install_mercury: install_ints install_mods install_library

.PHONY: install_ints
install_ints: $(library.ints)
	mkdir -p $(INSTALL_INT_DIR)
	for file in `vpath_find $(library.ints)`; do \
		target=$(INSTALL_INT_DIR)/`basename $$file`; \
		cp $$file $$target.tmp; \
		mercury_update_interface $$target; \
	done

.PHONY: install_mods
install_mods: $(library.cs)
	mkdir -p $(INSTALL_MODULE_DIR)
	for file in `vpath_find $(library.cs)`; do \
		grep '^BEGIN_MODULE' $$file > \
			$(INSTALL_MODULE_DIR)/`basename $$file .c`.init; \
	done

.PHONY: install_library
install_library: libmercury.a libmercury.so
	mkdir -p $(INSTALL_MERC_LIB_DIR)
	cp `vpath_find libmercury.a libmercury.so` $(INSTALL_MERC_LIB_DIR)

.PHONY: install_nuprolog
install_nuprolog: install_library_nu install_interpreter_nu

.PHONY: install_library_nu
install_library_nu: $(library.nos) $(NU_LIBRARY_NOS) \
			nc_builtin.nl np_builtin.nl
	mkdir -p $(INSTALL_NU_DIR)
	cp `vpath_find nc_builtin.nl np_builtin.nl` $(INSTALL_NU_DIR)
	mkdir -p $(INSTALL_NU_ARCH_DIR)
	cp `vpath_find $(library.nos) $(NU_LIBRARY_NOS)` \
		$(INSTALL_NU_ARCH_DIR)

.PHONY: install_interpreter_nu
install_interpreter_nu: library.nu
	mkdir -p $(INSTALL_NU_ARCH_DIR)
	sed "s^`pwd`^$(INSTALL_NU_ARCH_DIR)^g" `vpath_find library.nu` \
		> $(INSTALL_NU_ARCH_DIR)/library.nu
	-chmod +x $(INSTALL_NU_ARCH_DIR)/library.nu
	cp library.nu.save $(INSTALL_NU_ARCH_DIR)

.PHONY: install_sicstus
install_sicstus: install_interpreter_sicstus install_sicstus_compile

.PHONY: install_interpreter_sicstus
install_interpreter_sicstus: library.sicstus.debug
	mkdir -p $(INSTALL_SP_ARCH_DIR)
	cp library.sicstus.debug $(INSTALL_SP_ARCH_DIR)

.PHONY: install_sicstus_compile
install_sicstus_compile: sicstus_compile
	mkdir -p $(INSTALL_SP_ARCH_DIR)
	cp sicstus_compile $(INSTALL_SP_ARCH_DIR)

#-----------------------------------------------------------------------------#
