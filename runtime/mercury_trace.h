/*
** Copyright (C) 1997-1998 The University of Melbourne.
** This file may only be copied under the terms of the GNU Library General
** Public License - see the file COPYING.LIB in the Mercury distribution.
*/

/*
** mercury_trace.h has two functions.
**
** (a)	It defines the interface between the tracing subsystem of the runtime
**	and compiled code.
**
** (b)	It defines the interface by which the internal and external debuggers
**	can control how the tracing subsystem treats events.
**
** The macros and functions defined in this module are intended to be called
** only from code generated by the Mercury compiler, and from hand-written
** code in the Mercury runtime or the Mercury standard library.
*/

#ifndef MERCURY_TRACE_H
#define MERCURY_TRACE_H

/* The interface between the tracing subsystem and compiled code. */

#define	MR_trace_incr_seq()	(++MR_trace_call_seqno)
#define	MR_trace_incr_depth()	(++MR_trace_call_depth)
#define	MR_trace_reset_depth(d)	do { MR_trace_call_depth = (d); } while (0)

extern	Word	MR_trace_call_seqno;
extern	Word	MR_trace_call_depth;

/*
** This enum should exactly match the definition of the `trace_port' type in
** library/debugger_interface.
*/

typedef	enum {
	MR_PORT_CALL,
	MR_PORT_EXIT,
	MR_PORT_FAIL,
	MR_PORT_THEN,
	MR_PORT_ELSE,
	MR_PORT_DISJ,
	MR_PORT_SWITCH,
	MR_PORT_PRAGMA_FIRST,
	MR_PORT_PRAGMA_LATER
} MR_trace_port;

extern	void	MR_trace(
	const MR_Stack_Layout_Label *,	/* layout info for the event */
	MR_trace_port,
	Word,			/* call sequence number */
	Word,			/* call depth */
	const char *,		/* path to event goal within procedure */
	int,			/* highest numbered rN register in use */
	bool);			/* is this event supposed to be traced */

/*
** These functions will report the number of the last event,
** if there have been some events, and will do nothing otherwise.
*/

extern	void	MR_trace_report(FILE *fp);
extern	void	MR_trace_report_raw(int fd);

/*
** MR_trace_init() is called from mercury_runtime_init()
** when the debuggee programs begins, to perform any initialization
** that must be done before any traced Mercury code is executed.
** This includes the initialization code written in Mercury as well as main.
**
** MR_trace_start(enabled) is called from mercury_runtime_init()
** after the initialization code written in Mercury is executed,
** when we are about to start executing main. The argument says
** whether tracing is enabled for main (it is never enabled for
** initialization and finalization routines).
**
** MR_trace_end() is called from mercury_runtime_terminate() just
** after main has terminated and just before we call the finalization
** code written in Mercury.
**
** MR_trace_final() is called from mercury_runtime_terminate()
** after all Mercury code, including finalization code, has terminated.
*/

extern	void	MR_trace_init(void);
extern	void	MR_trace_start(bool enabled);
extern	void	MR_trace_end(void);
extern	void	MR_trace_final(void);

typedef	enum {
	MR_TRACE_INTERNAL,
	MR_TRACE_EXTERNAL
} MR_trace_type;

extern	MR_trace_type	MR_trace_handler;
extern	bool		MR_trace_enabled;

extern	Unsigned	MR_trace_event_number;

extern	Bool		MR_trace_from_full;

/* The interface between the debuggers and the tracing subsystem. */

/*
** MR_trace_cmd says what mode the tracer is in, i.e. how events should be
** treated.
**
** If MR_trace_cmd == MR_CMD_GOTO, the event handler will stop at the next
** event whose event number is equal to or greater than MR_trace_stop_event.
**
** If MR_trace_cmd == MR_CMD_FINISH, the event handler will stop at the next
** event that specifies the procedure invocation whose call number is in
** MR_trace_stop_seqno and whose port is final.
**
** If MR_trace_cmd == MR_CMD_RESUME_FORWARD, the event handler will stop at
** the next event of any call whose port is *not* final.
**
** If MR_trace_cmd == MR_CMD_TO_END, the event handler will not stop
** until the end of the program.
**
** If the event handler does not stop at an event, it will print the
** summary line for the event if MR_trace_print_intermediate is true.
*/

typedef enum {
	MR_CMD_GOTO,		/* stop at an event with a given number    */
	MR_CMD_FINISH,		/* stop when exiting/failing out of a proc */
	MR_CMD_RESUME_FORWARD,	/* stop at the next non-final port         */
	MR_CMD_TO_END		/* do not stop until the end of execution  */
} MR_trace_cmd_type;

typedef struct {
	MR_trace_cmd_type	MR_trace_cmd;	
	Unsigned		MR_trace_stop_seqno;
	Unsigned		MR_trace_stop_event;
	bool			MR_trace_print_intermediate;
} MR_trace_cmd_info;

#define	MR_port_is_final(port)	(port == MR_PORT_EXIT || port == MR_PORT_FAIL)

#endif /* MERCURY_TRACE_H */
