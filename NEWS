XXX include `tests' directory in release; remove `trial' directory.

Work in progress
----------------

* There is a new `--generate-bytecode' option --
  but we haven't written the bytecode interpreter yet.

* There is a new `--generate-prolog' option
  which does not work yet.

* There is a new `--optimize-constructor-last-call' option
  which identifies opportunities for LCO where a call
  is followed only by some constructor invocations.
  However, these opportunities are not exploited yet.

* We now allow programmers to give names to the arguments of constructor
  function symbols. XXX

* Support for big tables of facts. XXX

* Tabling/memoing of det and semidet predicates. XXX

DRAFT NEWS for Mercury release 0.7
----------------------------------

* The Mercury language now supports higher-order syntax.

  You can now write `P(X)' as an alternative to `call(P, X)'
  or `F(X)' as an alternative for `apply(F, X)'.

* The C interface is now fully implemented.

  The C interface now handles Mercury functions properly --
  previously it only handled predicates, not functions. 
  Also, exporting semidet predicates or functions to C now works
  (see `samples/c_interface/c_calls_mercury.m' for some examples).

* We now support cross-module optimizations.

  The `--intermodule-optimization' option enables cross-module inlining
  and cross-module specialization of higher-order predicates.
  Also `--intermod-unused-args' enables cross-module elimination of
  unused arguments.

* We've continued to improve the quality of the code we generate.

  We now use a more efficient argument-passing convention, and the code
  we generate for polymorphic predicates uses a more efficient "type-info"
  representation than previous versions. 

  (Note that this means code generated by Mercury 0.7 is not compatible
  with code generated by earlier versions, so you will need to
  recompile any existing Mercury object files or libraries when you
  install the new version.)

  We handle floating point code a bit better.  We don't box floating
  point values on 64-bit architectures anymore, and on 32-bit
  architectures we do a better job of avoiding unnecessary box/unbox
  operations.  We also make some use of floating point registers for
  holding temporary values.

  We've made several improvements to the code generator that result in
  better code in common situations.

  There's also a new optimization option, `--inline-alloc', which can
  speed up code that does a lot of memory allocation by inlining the
  GC_malloc() function.  (This option is also enabled by `-O6'.)

* We now support ELF shared libraries on Linux.

  See README.Linux for details.

  Note that using shared libraries is not yet the default,
  so if you want to take advantage of this, you must explicitly
  enable it as described in README.Linux.

* We have fixed quite a few bugs.

  Mode inference now works a little bit better. 
  
  We now allow a function of arity N to coexist with a predicate of
  arity N+1.

  The Mercury `char' type is now 8-bit clean (previously, "for
  compatibility with NU-Prolog" we only supported 7-bit characters).

* We've improved the compiler's diagnostics a bit.

  Some of the compiler's error messages are a bit more informative, and
  it catches some errors that previously it missed (such as specifiying
  modes in some but not all of the arguments of a `:- pred' declaration).

* We have made a few changes to the Mercury standard library.

  The changes are listed here, but see the library reference manual for
  details such as documentation on the new predicates.

  - We've finally implemented a generic `io__write' predicate.

  - The std_util.m module now contains predicates for traversing
    terms of arbitrary type: arg/3, det_arg/3, functor/3, and
    expand/4.  These are similar to Prolog's arg/3, functor/3,
    and '=..'.  (There is as yet no method for _constructing_
    terms of arbitrary type, however.)

  - We have a new module called time.m XXX to make benchmarking easier.
    The predicate report_stats, which used to be in std_util, is now
    in this module.

  - The interface to the relation module has been changed extensively.
    Elements must now be explicitly added to the domain of the relation,
    using relation__add_element/4, and relation operations such as
    relation__add are now performed on relation_keys.  There are also
    four new operations which convert elements to relation_keys and
    vice versa:
	relation__search_element/3, relation__lookup_element/3,
	relation__search_key/3, and relation__lookup_key/3

  - set__subset XXX

  - We made some extensive additions to bag.m to include the standard set
    operations (union, intersection, subtraction), and some other predicates
    for manipulating bags.  We also changed bag__contains/2 (swapped the 
    arguments), and bag__remove (now semidet) to be consistent with set.m 
    and map.m. 

  - There are two new predicates `io__tmpnam' and `io__remove_file',
    with semantics similar to the ANSI C functions tmpnam() and remove().

  - There are new predicates `int__max_int', `int__min_int', 
    `int__bits_per_int', `char__min_char_value', `char__max_char_value',
    with semantics similar to INT_MAX, INT_MIN, (CHAR_BIT * sizeof(int)),
    CHAR_MIN, and CHAR_MAX in ANSI C (respectively).

  - Added list__merge_and_remove_dups/4 and list__sort_and_remove_dups/4
    to complete the set of list__merge and list__sort operations.
