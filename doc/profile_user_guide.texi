\input texinfo
@setfilename profile.info
@settitle Mercury Profiling User Guide

@c @ignore
@ifinfo
@format
START-INFO-DIR-ENTRY
* Mercury: (profile).        Mercury Profiling User Guide
END-INFO-DIR-ENTRY
@end format
@end ifinfo
@c @end ignore

@c @smallbook
@c @cropmarks
@finalout
@setchapternewpage on
@ifinfo
This file describes how the mercury profiler works.

Copyright (C) 1995 University of Melbourne.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

@ignore
Permission is granted to process this file through Tex and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions.
@end ifinfo

@titlepage
@c @finalout
@title Mercury Profiling User Guide
@author Peter Ross
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 1995 University of Melbourne.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions.
@end titlepage
@page


@c ---------------------------------------------------------------------------


@ifinfo
This guide is intended to describe how to profile a program and then how
to analyse the information generated by the profiler.

@menu
* Introduction::         Introduction
* Profiling a program::  Profiling a program	
* Analysis of results::  Analysis of results
* Appendix A::           Slow_sort listing
* Appendix B::           mprof listing
@end menu

@end ifinfo


@c ---------------------------------------------------------------------------


@chapter Introduction

Mercury as part of being a complete software engineering language provides a 
profiling tool called @samp{mprof}.  A profiling tool is used to identify the
hotspots in a program.  Thus allowing the programmer to only optimise the parts
of the program which have a significant effect on the running speed of the 
program.

This document is intended to help the reader profile an existing application
and then analyse the results.  To this end it will be shown how to profile the
multiple module slow_sort program (see Appendix A) and interpret the results.

To profile a program the profiler collects 3 pieces of information at runtime.
They are the names of the predicates and the their associated address 
(@samp{Prof.Decl}), the number of times a predicate is called by a caller
(@samp{Prof.CallPair}) and the number of times the program counter (PC) 
is in a predicate when a profiling interrupt occurs (@samp{Prof.Counts}).
These three files are used to generate the profile.


@c ---------------------------------------------------------------------------


@chapter Profiling a program

To profile a single or multiple module program in Mercury is extremely easy. 

For a single module program just add the switch @samp{--profiling} or @samp{-p} 
to the command line for the compiler.  This also generates the modules static
call graph if the file @samp{@var{module}.prof}.  An example command line is :

@example
lmc --profiling @var{module}
@end example

For a multiple module system you must create a @samp{Mmake} file.  
First create a @samp{Mmake} file containing the two lines below.

@example
GRADE           = asm_fast.gc.prof
MGNUCFLAGS      = -DPROFILE_CALLS -DPROFILE_TIME
@end example

The @samp{GRADE} does not necessarily have to be of grade @samp{asm_fast.gc}.  
It may be of any legal grade but it must be followed by the @samp{.prof}, so
that the correct version of the libraries are linked into the executable.

Then execute the standard mmake command sequence.


@c ---------------------------------------------------------------------------


@chapter Analysis of results

The profile output consists of three major sections.  These are
named the call graph profile, the flat profile and the alphabetic listing.

The call graph profile presents the local call graph of each
predicate.  For each predicate it shows the parents (callers) and
children (callees) of that predicate, and shows the execution time and
call counts for each parent and child.  It is sorted on the total
amount of time spent in the predicate and all of its descendents (i.e.
all of the predicates that it calls, directly or indirectly.)

The flat profile allows the user to quickly determine which predicates 
account for the main proportion of execution time.  It is sorted on 
percentage of execution time spent in the predicate.

The alphabetic listing just lists the predicates in alphabetical order,
along with their index number in the other profiles, so that you can
quickly find the entry for a particular predicate.

To meaningfully interpret the information presented by the profiler, an 
understanding of how the data is generated is necessary.  
The profiler works by interrupting the program at frequent intervals,
and each time recording the currently active predicate.
It uses these counts to determine the proportion of the total time spent in
each predicate.  This means that the figures calculated for these times
are only a statistical approximation to the real values, and so they
should be treated with some caution.  Also at every predicate call it records
both the caller and callee and keeps a count. This information is exact.
@c XXX Also add a little example

The time spent in a predicate and its descendents is calculated by
propagating the times up the call graph, assuming that each call to a
predicate from a particular caller takes the same amount of time.
This assumption is usually reasonable, but again the results should
be treated with caution.
@c XXX Add a little example
@c eg 1 call to quick sort with a list of 1,000,000 elements
@c versus 100 calls with list of 10 elements
@c XXX This will also be an invalid assumption in the future.

To profile @var{slow_sort}, type the following at the command line

@example
slow_sort
mprof
@end example

Note that the program must be run so that the profiling information is
generated for use by @samp{mprof}.
For a full listing of the profile generated by the sort program see appendix B.

@menu
* Call graph profile::	Call graph profile
* Flat profile::	Flat profile
* Alphabetic Listing::  Alphabetic Listing
@end menu

@section Call graph profile

The call graph profile provides a small viewing window into the call graph.
For each profiled predicate you can see that predicates direct children and
parents.  This viewing window has extra information associated with it to 
allow the programmer to determine the contribution each parent and child 
makes to the performance of the current predicate.

Here is a small portion of the call graph from @var{slow_sort}.

@example
                                  called/total       parents
index  %time    self descendents  called+self    name           index
                                  called/total       children

                                                     <spontaneous>
[1]    100.0    0.00        0.75       0         call_engine_label [1] 
                0.00        0.75       1/1           do_interpreter [3]

-----------------------------------------------

                0.00        0.75       1/1           do_interpreter [3]
[2]    100.0    0.00        0.75       1         io__run/0(0) [2] 
                0.00        0.00       1/1           io__init_state/2(0) [11]
                0.00        0.74       1/1           main/2(0) [4]

-----------------------------------------------

                0.00        0.75       1/1           call_engine_label [1]
[3]    100.0    0.00        0.75       1         do_interpreter [3] 
                0.00        0.75       1/1           io__run/0(0) [2]

-----------------------------------------------

                0.00        0.74       1/1           io__run/0(0) [2]
[4]     99.9    0.00        0.74       1         main/2(0) [4] 
                0.00        0.74       1/1           sort/2(0) [5]
                0.00        0.00       1/1           print_list/3(0) [16]
                0.00        0.00       1/10          io__write_string/3(0) [18]

-----------------------------------------------

                0.00        0.74       1/1           main/2(0) [4]
[5]     99.9    0.00        0.74       1         sort/2(0) [5] 
                0.05        0.65       1/1           list__perm/2(0) [6]
                0.00        0.09   40320/40320       sorted/1(0) [10]

-----------------------------------------------

                                       8             list__perm/2(0) [6]
                0.05        0.65       1/1           sort/2(0) [5]
[6]     86.6    0.05        0.65       1+8      list__perm/2(0) [6] 
                0.00        0.60    5914/5914        list__insert/3(2) [7]
                                       8             list__perm/2(0) [6]

-----------------------------------------------

                0.00        0.60    5914/5914        list__perm/2(0) [6]
[7]     80.0    0.00        0.60    5914         list__insert/3(2) [7] 
                0.60        0.60    5914/5914        list__delete/3(3) [8]

-----------------------------------------------

                                   40319             list__delete/3(3) [8]
                0.60        0.60    5914/5914        list__insert/3(2) [7]
[8]     80.0    0.60        0.60    5914+40319  list__delete/3(3) [8] 
                                   40319             list__delete/3(3) [8]

-----------------------------------------------

                0.00        0.00       3/69283       tree234__set/4(0) [15]
                0.09        0.09   69280/69283       sorted/1(0) [10]
[9]     13.3    0.10        0.10   69283         compare/3(0) [9] 
                0.00        0.00       3/3           __Compare___io__stream/0(0) [20]
                0.00        0.00   69280/69280       builtin_compare_int/3(0) [27]

-----------------------------------------------

                0.00        0.09   40320/40320       sort/2(0) [5]
[10]    13.3    0.00        0.09   40320         sorted/1(0) [10] 
                0.09        0.09   69280/69283       compare/3(0) [9]

-----------------------------------------------
@end example

The first entry is @samp{call_engine_label} and its parent is
@samp{<spontaneous>}, meaning that it is the root of the call graph.
(The first three entries, @samp{call_engine_label}, @samp{do_interpreter},
and @samp{io__run/0} are all part of the Mercury runtime;
@samp{main/2} is the entry point to the user's program.)

Each entry of the call graph profile consists of three sections, the parent
predicates, the current predicate and the children predicates.

Reading across from the left, for the current predicate the fields are:

@itemize @bullet
@item
The unique index number for the current predicate.
(The index numbers are used only to make it easier to find
a particular entry in the call graph.)

@item
The percentage of total execution time spent in the current predicate
and all its descendents.
As noted above, this is only a statistical approximation.

@item
The ``self'' time: the time spent executing code that is
part of current predicate.
As noted above, this is only a statistical approximation.

@item
The descendent time: the time spent in the
current predicate and all its descendents.
As noted above, this is only a statistical approximation.

@item
The number of times a predicate is called.
If a predicate is (directly) recursive, this column
will contain the number of calls from other predicates,
a plus sign, and then the number of recursive calls.
These numbers are exact, not approximate.

@item
The name of the predicate followed by its index number.
@end itemize

The predicate names are not just followed by their arity but also by
their mode in brackets.  A mode of zero corresponds to the first mode
declaration of that predicate in the source code.  For example,
@samp{list__delete/3(3)} corresponds to the @samp{(out, out, in)} mode
of @samp{list__delete/3}.

Reading across from the left, for the parents the fields are:

@itemize @bullet
@item
The ``self'' time: the current predicates self time which is due to calls
from this parent.  Assumes that each call to a predicate is of the same
amount of time.

@item
The descendent time: the current predicates descendents time which is due to 
calls from this parent.  Assumes that each call to a predicate is of the same
amount of time.

@item
The number of times the current predicate is called by this parent out of the
total number of calls to the current predicate.

@item
The name of the parent followed by its index number.
@end itemize


Reading across from the left, for the children the fields are:

@itemize @bullet
@item
The ``self'' time: the number of second's of this child's self time which is 
due to being called by the current predicate.  In other words these are the
values that would appear next to the current predicate if it was the in the
parent listing of the child.  Assumes that each call to a predicate is of the
same time.

@item 
The descendent time: the number of second's of this child's descendent time 
which is due to the current predicate.  In other words these are the
values that would appear next to the current predicate if it was the in the
parent listing of the child.  Assumes that each call to a predicate is of the 
same time.

@item
the number of times this child is called by the current predicate out of the
total number of times the child is called.

@item 
The name of the child followed by its index number.
@end itemize



USING THE ABOVE INFORMATION ANALYSE SOME OF THE CALL GRAPH SHOWN ABOVE AND
SHOW HOW IT HIGHLIGHTS THE HOTSPOTS AND SO ON! 


@section Flat Profile

The flat profile is used to discern quickly the hotspots in the program.
While the call graph profile can be used to find the same data, it is not
as clearly set out. 

Here is a selection of the flat profile from @samp{slow_sort}.

@example
   %  cumulative    self              self    total
 time   seconds   seconds    calls  ms/call  ms/call name
 80.0       0.60     0.60     5914     0.10     0.10 list__delete/3(3) [8] 
 13.3       0.70     0.10    69283     0.00     0.00 compare/3(0) [9] 
  6.6       0.75     0.05        1    50.00   650.00 list__perm/2(0) [6] 
  0.0       0.75     0.00        1     0.00     0.00 print_list/3(0) [16] 
  0.0       0.75     0.00        1     0.00     0.00 print_list_2/3(0) [17] 
  0.0       0.75     0.00        1     0.00   749.99 main/2(0) [4] 
  0.0       0.75     0.00        1     0.00   749.99 sort/2(0) [5] 
  0.0       0.75     0.00    40320     0.00     0.00 sorted/1(0) [10] 
  0.0       0.75     0.00        0     NaN0     Inf0 call_engine_label [1] 
  0.0       0.75     0.00        1     0.00   750.00 io__run/0(0) [2] 
@end example

Reading across from the left for each predicate we have

@itemize @bullet
@item
The percentage of total running time spent executing the current predicate.

@item
Cumulative seconds is the number of seconds spent executing the current 
predicate and all those above it.

@item
Self seconds is the number of seconds spent executing the current predicate
and is equivalent to the self time from the call graph profile.

@item
Calls is the number of times the predicate is called.  
XXX It doesn't at the moment include the number of self recursive calls.

@item
Self ms/call is the number of milliseconds each call takes on average.

@item
Total ms/call is the average number of milliseconds spent in the current
predicate and all its descendents per call.

@item
The name of the predicate with it's index number.
@end itemize

From the above sample listing it can be seen that approximately 80 percent 
of the programs running time is spent in @samp{list__delete/3(3)}.  Hence 
optimising this predicate or making its use redundant would be of a high 
priority to the programmer.  As an aid to making that decision the flat 
profile provides the self and total ms/call.  We note that each call to 
@samp{list__delete/3(3)} takes approximately 0.1 milliseconds.  Hence there 
is only a tiny margin for improvement.  This would then suggest to the
programmer that it would be more profitable to try and make the use of
@samp{list__delete/3(3)} irrelevant.


While on the other hand the program spends
no discernable time in @samp{printlist/3(0)}, and hence optimising it would 
be a waste of the programmers time.


@section Alphabetic Listing

The alphabetic listing allows a predicates to be quickly referenced.
One note is about functions which share the same address but different names
in memory.

These are ....  
At the moment it only indexes the first one.

@c --------------------------------------------------------------------------- 


@chapter Appendix A: Slow_sort 


slow_sort.m 
@example
%------------------------------------------------------------------------------%
% Author:       petdr
%
% Sorts a list of numbers by generating permutations of the list to be sorted
% until the list is sorted.
%------------------------------------------------------------------------------%


:- module slow_sort.

:- import_module io.

:- interface.

:- pred main(io__state, io__state).
:- mode main(di, uo) is multi.


%------------------------------------------------------------------------------%

:- implementation.

:- import_module list, require.
:- import_module printlist.


main -->
        io__write_string("Profiling Test\n"),
        { List0 = [8,7,6,5,4,3,2,1] },
        (
                { sort(List0, List1) }
        ->
                { List = List1 }
        ;
                % A never-happen case needed to pass determinism checking.
                { error("List should always sorted\n") }
        ),
        print_list(List).


        % sort(U, S) is true iff S is U sorted.
        %
:- pred sort(list(T), list(T)).
:- mode sort(in, out) is nondet.

sort(UnsortedList, SortedList) :-
        list__perm(UnsortedList, SortedList),
        sorted(SortedList).


        % sorted(L) is true iff L is a sorted list
        %
:- pred sorted(list(T)).
:- mode sorted(in) is semidet.

sorted([]).
sorted([_X]).
sorted([X, Y | Xs]) :-
        compare(Result, X, Y),
        Result = (<),
        sorted([Y | Xs]).
@end example

printlist.m

@example
:- module printlist.

:- interface.

:- import_module list, int, io.

:- pred print_list(list(int), io__state, io__state).
:- mode print_list(in, di, uo) is det.

:- implementation.

print_list(Xs) -->
        (
                { Xs = [] }
        ->
                io__write_string("[]\n")
        ;
                io__write_string("["),
                print_list_2(Xs),
                io__write_string("]\n")
        ).

:- pred print_list_2(list(int), io__state, io__state).
:- mode print_list_2(in, di, uo) is det.

print_list_2([]) --> [].
print_list_2([X|Xs]) --> 
        io__write_int(X),
        (
                { Xs = [] }
        ->
                []
        ;
                io__write_string(", "),
                print_list_2(Xs)
        ).
@end example


@c ---------------------------------------------------------------------------


@chapter Appendix B: mprof listing


@example
call graph profile:
	Sorted on the %time field.

	predicate entries:

index	the index number of the predicate in the call graph
	listing.

%time	the percentage of the total running time of
	the program spent in this predicate and its
	descendents.

self	the number of seconds spent actually executing
	the predicate's own code.

descendents
	the number of seconds spent executing the
	descendents of the current predicate.

called	the number of times the current predicate is
	called (not counting self recursive calls).

self	the number of self recursive calls.

name	the name of the current predicate.

index	a index number to locate the function easily.



	parent listings:

self*	the number of seconds of the current predicates self
	time due to calls from this parent.

descendents*
	the number of second's of the current predicate's descendent
	time which is due to call's from this parent.

called*	the number of times the current predicate is called
	by this parent.

total	the number of times this predicate is called by it's parents.

parents	the name of this parent.

index	the index number of the parent predicate



children listings:

self*	the number of second's of this child's self time which is due
	to being called by the current predicate.

descendent*
	the number of second's of this child's desdendent time which is due
	to the current predicate.

called*	the nubmer of times this child is called by the current
	predicate.

total*	the number of time's this child is called by all predicates.

children	the name of this child.

index	the index number of the child.

                                  called/total       parents
index  %time    self descendents  called+self    name           index
                                  called/total       children

                                                     <spontaneous>
[1]    100.0    0.00        0.75       0         call_engine_label [1] 
                0.00        0.75       1/1           do_interpreter [3]

-----------------------------------------------

                0.00        0.75       1/1           do_interpreter [3]
[2]    100.0    0.00        0.75       1         io__run/0(0) [2] 
                0.00        0.00       1/1           io__init_state/2(0) [11]
                0.00        0.74       1/1           main/2(0) [4]

-----------------------------------------------

                0.00        0.75       1/1           call_engine_label [1]
[3]    100.0    0.00        0.75       1         do_interpreter [3] 
                0.00        0.75       1/1           io__run/0(0) [2]

-----------------------------------------------

                0.00        0.74       1/1           io__run/0(0) [2]
[4]     99.9    0.00        0.74       1         main/2(0) [4] 
                0.00        0.74       1/1           sort/2(0) [5]
                0.00        0.00       1/1           print_list/3(0) [16]
                0.00        0.00       1/10          io__write_string/3(0) [18]

-----------------------------------------------

                0.00        0.74       1/1           main/2(0) [4]
[5]     99.9    0.00        0.74       1         sort/2(0) [5] 
                0.05        0.65       1/1           list__perm/2(0) [6]
                0.00        0.09   40320/40320       sorted/1(0) [10]

-----------------------------------------------

                                       8             list__perm/2(0) [6]
                0.05        0.65       1/1           sort/2(0) [5]
[6]     86.6    0.05        0.65       1+8      list__perm/2(0) [6] 
                0.00        0.60    5914/5914        list__insert/3(2) [7]
                                       8             list__perm/2(0) [6]

-----------------------------------------------

                0.00        0.60    5914/5914        list__perm/2(0) [6]
[7]     80.0    0.00        0.60    5914         list__insert/3(2) [7] 
                0.60        0.60    5914/5914        list__delete/3(3) [8]

-----------------------------------------------

                                   40319             list__delete/3(3) [8]
                0.60        0.60    5914/5914        list__insert/3(2) [7]
[8]     80.0    0.60        0.60    5914+40319  list__delete/3(3) [8] 
                                   40319             list__delete/3(3) [8]

-----------------------------------------------

                0.00        0.00       3/69283       tree234__set/4(0) [15]
                0.09        0.09   69280/69283       sorted/1(0) [10]
[9]     13.3    0.10        0.10   69283         compare/3(0) [9] 
                0.00        0.00       3/3           __Compare___io__stream/0(0) [20]
                0.00        0.00   69280/69280       builtin_compare_int/3(0) [27]

-----------------------------------------------

                0.00        0.09   40320/40320       sort/2(0) [5]
[10]    13.3    0.00        0.09   40320         sorted/1(0) [10] 
                0.09        0.09   69280/69283       compare/3(0) [9]

-----------------------------------------------

                0.00        0.00       1/1           io__run/0(0) [2]
[11]     0.0    0.00        0.00       1         io__init_state/2(0) [11] 
                0.00        0.00       1/1           io__insert_std_stream_names/2(0) [13]
                0.00        0.00       1/1           ops__init_op_table/1(0) [28]
                0.00        0.00       1/1           type_to_univ/2(0) [25]
                0.00        0.00       2/2           map__init/1(0) [26]

-----------------------------------------------

                0.00        0.00       3/3           io__insert_std_stream_names/2(0) [13]
[12]     0.0    0.00        0.00       3         io__insert_stream_name/4(0) [12] 
                0.00        0.00       3/3           map__set/4(0) [14]
                0.00        0.00       6/6           copy/2(0) [24]

-----------------------------------------------

                0.00        0.00       1/1           io__init_state/2(0) [11]
[13]     0.0    0.00        0.00       1         io__insert_std_stream_names/2(0) [13] 
                0.00        0.00       1/1           io__stderr_stream/3(0) [23]
                0.00        0.00       1/1           io__stdout_stream/3(0) [22]
                0.00        0.00       1/1           io__stdin_stream/3(0) [21]
                0.00        0.00       3/3           io__insert_stream_name/4(0) [12]

-----------------------------------------------

                0.00        0.00       3/3           io__insert_stream_name/4(0) [12]
[14]     0.0    0.00        0.00       3         map__set/4(0) [14] 
                0.00        0.00       3/3           tree234__set/4(0) [15]

-----------------------------------------------

                0.00        0.00       3/3           map__set/4(0) [14]
[15]     0.0    0.00        0.00       3         tree234__set/4(0) [15] 
                0.00        0.00       3/69283       compare/3(0) [9]

-----------------------------------------------

                0.00        0.00       1/1           main/2(0) [4]
[16]     0.0    0.00        0.00       1         print_list/3(0) [16] 
                0.00        0.00       1/1           print_list_2/3(0) [17]
                0.00        0.00       2/10          io__write_string/3(0) [18]

-----------------------------------------------

                0.00        0.00       1/1           print_list/3(0) [16]
[17]     0.0    0.00        0.00       1         print_list_2/3(0) [17] 
                0.00        0.00       7/10          io__write_string/3(0) [18]
                0.00        0.00       8/8           io__write_int/3(0) [19]

-----------------------------------------------

                0.00        0.00       1/10          main/2(0) [4]
                0.00        0.00       2/10          print_list/3(0) [16]
                0.00        0.00       7/10          print_list_2/3(0) [17]
[18]     0.0    0.00        0.00      10         io__write_string/3(0) [18] 

-----------------------------------------------

                0.00        0.00       8/8           print_list_2/3(0) [17]
[19]     0.0    0.00        0.00       8         io__write_int/3(0) [19] 

-----------------------------------------------

                0.00        0.00       3/3           compare/3(0) [9]
[20]     0.0    0.00        0.00       3         __Compare___io__stream/0(0) [20] 

-----------------------------------------------

                0.00        0.00       1/1           io__insert_std_stream_names/2(0) [13]
[21]     0.0    0.00        0.00       1         io__stdin_stream/3(0) [21] 

-----------------------------------------------

                0.00        0.00       1/1           io__insert_std_stream_names/2(0) [13]
[22]     0.0    0.00        0.00       1         io__stdout_stream/3(0) [22] 

-----------------------------------------------

                0.00        0.00       1/1           io__insert_std_stream_names/2(0) [13]
[23]     0.0    0.00        0.00       1         io__stderr_stream/3(0) [23] 

-----------------------------------------------

                0.00        0.00       6/6           io__insert_stream_name/4(0) [12]
[24]     0.0    0.00        0.00       6         copy/2(0) or copy/2(1) [24] 

-----------------------------------------------

                0.00        0.00       1/1           io__init_state/2(0) [11]
[25]     0.0    0.00        0.00       1         type_to_univ/2(0) or type_to_univ/2(1) [25] 

-----------------------------------------------

                0.00        0.00       2/2           io__init_state/2(0) [11]
[26]     0.0    0.00        0.00       2         map__init/1(0) [26] 
                0.00        0.00       2/2           tree234__init/1(0) [29]

-----------------------------------------------

                0.00        0.00   69280/69280       compare/3(0) [9]
[27]     0.0    0.00        0.00   69280         builtin_compare_int/3(0) [27] 

-----------------------------------------------

                0.00        0.00       1/1           io__init_state/2(0) [11]
[28]     0.0    0.00        0.00       1         ops__init_op_table/1(0) [28] 

-----------------------------------------------

                0.00        0.00       2/2           map__init/1(0) [26]
[29]     0.0    0.00        0.00       2         tree234__init/1(0) [29] 

-----------------------------------------------


flat profile:

 %	the percentage of total running time of the program
time	used by this function.

 cum	the total time of the current predicate and the one's
time	listed above it.

 self	the number of seconds accounted for by this predicate alone.
seconds	The listing is sorted on this row.

calls	the number of times this predicate was called.

 self	the average number of milliseconds spent in
ms/call	this predicate per call.

 total	the average number of milliseconds spent in this predicate and it's
ms/call	descendents per call.

name	the name of the predicate followed by it's index number.

   %  cumulative    self              self    total
 time   seconds   seconds    calls  ms/call  ms/call name
 80.0       0.60     0.60     5914     0.10     0.10 list__delete/3(3) [8] 
 13.3       0.70     0.10    69283     0.00     0.00 compare/3(0) [9] 
  6.6       0.75     0.05        1    50.00   650.00 list__perm/2(0) [6] 
  0.0       0.75     0.00        1     0.00     0.00 print_list/3(0) [16] 
  0.0       0.75     0.00        1     0.00     0.00 print_list_2/3(0) [17] 
  0.0       0.75     0.00        1     0.00   749.99 main/2(0) [4] 
  0.0       0.75     0.00        1     0.00   749.99 sort/2(0) [5] 
  0.0       0.75     0.00    40320     0.00     0.00 sorted/1(0) [10] 
  0.0       0.75     0.00        0     NaN0     Inf0 call_engine_label [1] 
  0.0       0.75     0.00        1     0.00   750.00 io__run/0(0) [2] 
  0.0       0.75     0.00       10     0.00     0.00 io__write_string/3(0) [18] 
  0.0       0.75     0.00        8     0.00     0.00 io__write_int/3(0) [19] 
  0.0       0.75     0.00        3     0.00     0.00 __Compare___io__stream/0(0) [20] 
  0.0       0.75     0.00        1     0.00     0.00 io__stdin_stream/3(0) [21] 
  0.0       0.75     0.00        1     0.00     0.00 io__stdout_stream/3(0) [22] 
  0.0       0.75     0.00        1     0.00     0.00 io__stderr_stream/3(0) [23] 
  0.0       0.75     0.00        6     0.00     0.00 copy/2(0) or copy/2(1) [24] 
  0.0       0.75     0.00        1     0.00     0.00 type_to_univ/2(0) or type_to_univ/2(1) [25] 
  0.0       0.75     0.00        1     0.00   750.00 do_interpreter [3] 
  0.0       0.75     0.00        1     0.00     0.00 io__init_state/2(0) [11] 
  0.0       0.75     0.00        3     0.00     0.00 io__insert_stream_name/4(0) [12] 
  0.0       0.75     0.00        1     0.00     0.00 io__insert_std_stream_names/2(0) [13] 
  0.0       0.75     0.00     5914     0.00     0.10 list__insert/3(2) [7] 
  0.0       0.75     0.00        2     0.00     0.00 map__init/1(0) [26] 
  0.0       0.75     0.00        3     0.00     0.00 map__set/4(0) [14] 
  0.0       0.75     0.00    69280     0.00     0.00 builtin_compare_int/3(0) [27] 
  0.0       0.75     0.00        1     0.00     0.00 ops__init_op_table/1(0) [28] 
  0.0       0.75     0.00        2     0.00     0.00 tree234__init/1(0) [29] 
  0.0       0.75     0.00        3     0.00     0.00 tree234__set/4(0) [15] 



alphabetic listing:

[20]	__Compare___io__stream/0(0)   [27]	builtin_compare_int/3(0)      
[1]	call_engine_label             [9]	compare/3(0)                  
[24]	copy/2(0)                     [3]	do_interpreter                
[11]	io__init_state/2(0)           [13]	io__insert_std_stream_names/2(0)
[12]	io__insert_stream_name/4(0)   [2]	io__run/0(0)                  
[23]	io__stderr_stream/3(0)        [21]	io__stdin_stream/3(0)         
[22]	io__stdout_stream/3(0)        [19]	io__write_int/3(0)            
[18]	io__write_string/3(0)         [8]	list__delete/3(3)             
[7]	list__insert/3(2)             [6]	list__perm/2(0)               
[4]	main/2(0)                     [26]	map__init/1(0)                
[14]	map__set/4(0)                 [28]	ops__init_op_table/1(0)       
[16]	print_list/3(0)               [17]	print_list_2/3(0)             
[5]	sort/2(0)                     [10]	sorted/1(0)                   
[29]	tree234__init/1(0)            [15]	tree234__set/4(0)             
[25]	type_to_univ/2(0)             
@end example


@c ---------------------------------------------------------------------------


@bye
