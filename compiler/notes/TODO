*******************************************************************************

TODO LIST:
----------
code generation:
---------------

- nondeterministic code generation - fix various problems:
  1 - heap reclamation still not being done in some places;
  2 - failure continuation handling is up the creek.

- generate code for complicated_unify's (there are some comments about
  this in the paper.)

- generate code for higher-order preds and polymorphic complicated_unify's.

typechecking
------------

- improve error messages for unification of var & functor

- see also wish list comments at the start of typecheck.nl

modes analysis
--------------

- detect incorrect usage of `bound(...)' insts.

- handle undefined insts/modes gracefully

- handle unique modes!

- handle polymorphic modes

- see also comments at the start of modes.nl

general
-------

- tail recursion optimization (vanilla) and also pass-by-reference
  tail recursion.

- modes.nl:
  split construct/deconstruct unifications into their atomic
  "micro-unification" pieces when necessary.

- warn about predicates with no clauses.

- warn about predicates with no modes.

- handle abstract insts in the same way abstract types are handled (???)

- test & debug the determinism analysis 

- improve efficiency of implicit quantification

- renaming apart of different occurences
  of the same variable; warning about variables which occur in
  overlapping scopes.

- optimization of various sorts

- array.nl: write a predicate to resize arrays.

- garbage collection

mercury_to_goedel.nl
--------------------

- see comments at the start of that file

*******************************************************************************

WISH LIST
---------

code generation:
---------------

- The generated code should include some profiling hooks.
  In particular, we should add a version of the heap allocation
  macro which takes an extra string parameter identifying which
  routine allocated the memory.  Then we can do heap-allocation
  profiling to identify which routines use up all the bloody memory.

- Generate constant compound terms at compile time rather than at runtime.

general
-------

- handle module qualifiers properly

- more work on module system, separate compilation, and the multiple
  specialization problem

- deforestation

- mode segments & high-level transformation of circularly moded programs.

- implement user-defined operators:
	Add a new construct `:- op(Pred, Type, Op).' as in Prolog;
	change prog_io.nl to parse this construct and call io__op
	accordingly.

- better error handling

- fix all the `XXX's, `xxx's, `YYY's and `%%%'s.

- implement a debugger and a profiler

*******************************************************************************
