#-----------------------------------------------------------------------------#

main_target:	check

include ../Mmake.common

RM_C=:

#-----------------------------------------------------------------------------#

# We suppress the printing of the banner, because different workspaces
# may get different version numbers printed in it. This would otherwise be
# the source of irrelevant difference between the actual and expected outputs.

MDB = MERCURY_SUPPRESS_MDB_BANNER=yes mdb

#-----------------------------------------------------------------------------#

DEBUGGER_PROGS=	\
	debugger_regs			\
	existential_type_classes	\
	implied_instance		\
	interpreter			\
	multi_parameter			\
	queens

MCFLAGS = --trace deep
MLFLAGS = --trace
C2INITFLAGS = --trace

# We need to use shared libraries for interactive queries to work.
# The following is necessary for shared libraries to work on Linux.
MGNUCFLAGS-queens = --pic-reg
MLFLAGS-queens = --shared

# Base grades `jump' and `fast' cannot be used with
# stack layouts (which are required for tracing).

ifneq "$(findstring asm_,$(GRADE))" ""
    PROGS=$(DEBUGGER_PROGS)
else
    ifneq "$(findstring jump,$(GRADE))" ""
	PROGS=
    else
	ifneq "$(findstring fast,$(GRADE))" ""
	    PROGS=
	else
	    PROGS=$(DEBUGGER_PROGS)
	endif
    endif
endif

LIBPROGS=	$(PROGS:%=%_lib)
ALLPROGS=	$(PROGS)

#-----------------------------------------------------------------------------#

debugger_regs.out: debugger_regs debugger_regs.inp
	$(MDB) ./debugger_regs < debugger_regs.inp > debugger_regs.out 2>&1

existential_type_classes.out: existential_type_classes \
			existential_type_classes.inp
	$(MDB) ./existential_type_classes < existential_type_classes.inp \
		> existential_type_classes.out 2>&1

implied_instance.out: implied_instance implied_instance.inp
	$(MDB) ./implied_instance < implied_instance.inp \
		> implied_instance.out 2>&1

interpreter.out: interpreter interpreter.inp
	$(MDB) ./interpreter interpreter.m < interpreter.inp \
		> interpreter.out 2>&1

multi_parameter.out: multi_parameter multi_parameter.inp
	$(MDB) ./multi_parameter < multi_parameter.inp \
		> multi_parameter.out 2>&1

# Note that queens.out.orig depends on $(queens.ints) because queens.inp
# contains interactive queries that require queens.ints to have been built.
queens.out.orig: queens queens.inp $(queens.ints)
	$(MDB) ./queens < queens.inp > queens.out.orig 2>&1

# We pipe the output through sed to remove some spurious warnings that
# `ld' issues.
# XXX we should fix the spurious warnings about unresolved symbols.
# (The spurious warnings about exception handling are due to a flaw
# in the Digital Unix 3.2 linker, so that one is DEC's problem.)
queens.out: queens.out.orig
	cat queens.out.orig | \
		sed \
		    -e '/\/usr\/bin\/ld:$$/N' \
		    -e 's/\/usr\/bin\/ld:.//' \
		    -e '/Warning: Linking some objects which contain exception information sections$$/N' \
		    -e 's/Warning: Linking some objects which contain exception information sections.//' \
		    -e '/	and some which do not. This may cause fatal runtime exception handling$$/N' \
		    -e 's/	and some which do not. This may cause fatal runtime exception handling.//' \
		    -e '/	problems (last obj encountered without exceptions was .*)\.$$/N' \
		    -e 's/	problems (last obj encountered without exceptions was .*)\..//' \
		    -e '/Warning: Unresolved:$$/N' \
		    -e 's/Warning: Unresolved:.//' \
		    -e '/<predicate .main.\/2 mode 0>$$/N' \
		    -e 's/<predicate .main.\/2 mode 0>.//' \
		    -e '/<predicate .queens:qperm.\/2 mode 0>$$/N' \
		    -e 's/<predicate .queens:qperm.\/2 mode 0>.//' \
		    -e '/__start$$/N' \
		    -e 's/__start.//' \
		    > queens.out
	# ignore egcs internal errors -- those are not our fault
	if grep 'gcc.*Internal compiler error' queens.out; then \
		cp queens.exp queens.out; \
	fi

# We ignore the result of this action because
# the exit status of grep is not useful in this case
mdb_command_test.out: queens mdb_command_test.inp
	-$(MDB) ./queens < mdb_command_test.inp 2>&1 \
		| egrep "internal error in the trace help system" \
		> mdb_command_test.out

#-----------------------------------------------------------------------------#

DEPS=		$(ALLPROGS:%=$(deps_subdir)%.dep)
DEPENDS=	$(ALLPROGS:%=%.depend)
OUTS=		$(PROGS:%=%.out)
LIBOUTS=	$(LIBPROGS:%=%.out)
RESS=		$(PROGS:%=%.res) mdb_command_test.res
LIBRESS=	$(LIBPROGS:%=%.res) mdb_command_test.res

#-----------------------------------------------------------------------------#

dep:		$(DEPS)

depend:		$(DEPENDS)

check:		$(OUTS) $(RESS)

check_lib:	$(LIBOUTS) $(LIBRESS)

all:		$(ALLPROGS)

#-----------------------------------------------------------------------------#
