\input texinfo
@setfilename mercury_user_guide.info
@settitle The Mercury User's Guide

@ignore
@ifinfo
@format
START-INFO-DIR-ENTRY
* Mercury: (mercury).                The Mercury User's Guide.
END-INFO-DIR-ENTRY
@end format
@end ifinfo
@end ignore

@c @smallbook
@c @cropmarks
@c @finalout
@setchapternewpage odd
@ifinfo
This file documents the Mercury implementation.

Copyright (C) 1995 University of Melbourne.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

@ignore
Permission is granted to process this file through Tex and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions.
@end ifinfo

@titlepage
@c @finalout
@title The Mercury User's Guide
@subtitle ALPHA TEST version, March 1995
@author Fergus Henderson
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 1995 University of Melbourne.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions.
@end titlepage
@page

@iftex
@chapter Getting Started
@end iftex

@node Top,,, (DIR)
@ifinfo
@chapter The Mercury User's Guide - ALPHA TEST version, March 1995
@end ifinfo
@menu
* Filenames::       File naming conventions
* Hello::           Your first Mercury Program
* Using Mmake::     ``Mercury Make'', a tool for building Mercury programs
* Using Mercury::   Compiling and linking programs with the Mercury compiler
* Using NU-Prolog:: Building and debugging Mercury programs with NU-Prolog
* Using SICStus::   Building and debugging Mercury programs with SICStus Prolog
* FAQs::            Frequently Asked Questions
* Invocation::      List of options for the Mercury compiler
@end menu

@node Filenames, Hello,, Top
@section File naming conventions

Mercury source files should be named @file{*.m}.

Files ending in @file{.d} are automatically-generated Makefile
fragments which contain the dependencies for each module.

Files ending in @file{.int} and @file{.int2} are interface files;
these are generated automatically by the compiler, using the
@samp{--make-interface} option.  (The @file{.int} files are for
direct dependencies, while the @file{.int2} files are a shorter version
used for indirect dependencies.)  Associated with these interface files
is a @file{.date} file, which is used as a date-stamp so that Make
can tell when the interface file was last updated.

In the source code for the Mercury runtime library, we use a few
files ending in @file{.mod}; these are preprocessed using
a perl script mod2c to produce C files.  Originally the Mercury
compiler also produced .mod files, but now we compile directly to C.

As usual, @file{.c} files are C source code, @file{.o} files are
object code, @file{.no} files are NU-Prolog object code, and
@file{.ql} files are SICStus Prolog object code.

@node Hello, Using Mmake, Filenames, Top
@section Your first Mercury program

@example
:- module hello.
:- interface.
:- import_module io.

:- pred main(io__state::di, io__state::uo) is det.

:- implementation.

main --> io__write_string("Hello, world\n").
@end example

@node Using Mmake, Using Mercury, Hello, Top
@section Using Mmake

Mmake, short for ``Mercury Make'', is a tool for building Mercury programs
that is built on top of ordinary or GNU Make.  With Mmake, building
even a complicated Mercury program consisting of a number of modules
is as simple as

@example
mmake @var{main-module}.depend
mmake @var{main-module}
@end example

Mmake only recompiles those files that need to be recompiled,
based on automatically generated dependency information.
Most of the dependencies are stored in @samp{.d} files that are
automatically recomputed every time you recompile, so they are
never out-of-date.  A little bit of the dependency information is
stored in @samp{.dep} files which are more expensive to recompute. 
The @samp{mmake @var{main-module}.depend} command to recreate the
@code{@var{main-module}.dep} file needs to be repeated only when you
add or remove a module from your program, and there is no danger of
getting an inconsistent executable if you forget this step --- instead
you will get a link error.

If there is a file called @samp{Mmake} in the current directory,
Mmake will include that file in its automatically-generated
Makefile.  The @samp{Mmake} file can override the default values of
various variables used by Mmake's builtin rules, listed below,
or it can add additional rules, dependencies, and actions.
@samp{mmake} allows you to build more than one program in the same directory.

Mmake's builtin rules are defined by the file 
@file{@var{prefix}/lib/mercury/mmake/Mmake.rules} (where @var{prefix} is
@file{/usr/local} by default), as well as the rules in the
automatically-generated @file{.dep} files.  These rules define
the following targets:

@table @file
@item @var{main-module}.depend
Creates the file @file{@var{main-module}.dep} from @file{@var{main-module}.m}
and the modules it imports.  This step must be performed first.

@item @var{main-module}.ints
Ensure that the interface files for @var{main-module} and its imported
modules are up-to-date.  (If the underlying @samp{make} program does
not handle transitive dependencies, this step may be necessary before
attempting to make @file{@var{main-module}.check} or @file{@var{main-module}};
if the underlying @samp{make} is GNU Make, this step should not be
necessary.)

@item @var{main-module}.check
Perform semantic checking on @var{main-module} and its imported modules.
Error messages are placed in @file{.err} files.

@item @var{main-module}
Compiles and links @var{main-module} using the Mercury compiler.
Error messages are placed in @file{.err2} files.

@item @var{main-module}.nu
Compiles and links @var{main-module} using NU-Prolog.

@item @var{main-module}.nu.debug
Compiles and links @var{main-module} using NU-Prolog.
The resulting executable will start up in the NU-Prolog interpreter
rather than calling main/2.

@item @var{main-module}.sicstus
Compiles and links @var{main-module} using SICStus Prolog.

@item @var{main-module}.sicstus.debug
Compiles and links @var{main-module} using SICStus Prolog.
The resulting executable will start up in the SICStus Prolog interpreter
rather than calling main/2.

@item clean
Removes all the automatically generated files except
the executables and the dependency files.
(Note that the rule for @code{mmake clean} includes @samp{rm -f *.c},
so be careful if you mix C source code and Mercury code in the same directory!
This behaviour can be overridden by resetting the CLEAN_C variable in
your Mmake file.)

@item realclean
Like @samp{clean}, but also removes the executables and the dependency files.

@end table

The variables used by the builtin rules are defined in 
@file{@var{prefix}/lib/mercury/mmake/Mmake.vars}.
They are listed below, together with their default values.

@example
GRADE           = asm_fast.gc
MC              = mc
MCG             = $(MC) --generate-code
MCD             = $(MC) --generate-dependencies
MCI             = $(MC) --make-interface
MCFLAGS         =
MCIFLAGS        = $(MCFLAGS)
MCDFLAGS        = $(MCFLAGS)
MCGFLAGS        = $(MCFLAGS)
MOD2C           = mod2c
MOD2CFLAGS      = 
MOD2H           = mod2h
MOD2HFLAGS      = 
C2INIT          = c2init
C2INITFLAGS     =
MGNUC           = mgnuc
MGNUCFLAGS      =
ML              = ml
MLFLAGS         =
MNC             = mnc
MNCFLAGS        =
MNL             = mnl
MNLFLAGS        =
MNP             = mnp
MNPFLAGS        =
MSC             = msc
MSCFLAGS        =
MSL             = msl
MSLFLAGS        =
MSP             = msp
MSPFLAGS        =
PIC             = -fpic -shared
CLEAN_C		= -rm -f *.c
@end example

@node Using Mercury, Using NU-Prolog, Using Mmake, Top
@section Using the Mercury compiler

This section describes how to build executable programs using the
Mercury compiler.  Note that the scripts used all accept a @samp{-v}
(verbose) option.  You can use that option to see what is actually
going on.

@subsection Compiling single-module programs
To compile a program which consists of just a single module,
use the command

@example
mc --link @var{module}
@end example

@subsection Compiling multi-module programs

For multi-module programs, you need to make the interface files before
compiling the modules.  After that, if you don't want separate
compilation you can use the @samp{--link} option:

@example
mc --link @var{modules}
@end example

If you want separate compilation, you should compile the modules,
create the init file, and then link them together as described in
the following sections.

@subsubsection Making the interface files
Before you can compile a module, you need to make the interface files
for the modules that it imports (directly or indirectly).
Use the command

@example
mc -i @var{modules}
@end example

@noindent
to create these interface files.

@subsubsection Checking for errors
The default action of @samp{mc} without any options

@example
mc @var{modules}
@end example

@noindent
is to perform syntactic and semantic checking on the named modules, but
not to generate any code.  This is particularly useful if you intend to
use NU-Prolog (@pxref{Using NU-Prolog}) or SICStus Prolog (@pxref{Using
SICStus}) for interpreting/compiling Mercury programs, since of course
they do not do any of the semantic checking that is done by the Mercury
compiler.

@subsubsection Compiling modules
Use the command 

@example
mc -c @var{module}
@end example

@noindent
to compile each module.
Many additional options are available (@pxref{Invocation}).

@subsubsection Creating the init file
Before linking, you need create a small C file which calls the
initialization function for each module in your program.
Use the commands 

@example
c2init *.c > @var{module}_init.c,
mgnuc -c @var{module}_init.c
@end example

@subsubsection Linking
Use the command 

@example
ml -o @var{module} *.o
@end example

@subsection Executing the program.
Use the command @samp{./@var{module} @var{runtime-options} -- @var{arguments}}
You need the @samp{--} to separate the options to the Mercury runtime
from the options to your program.  Invoking the program with @samp{-h}
will list the available @var{runtime-options}.

@subsection Debugging.
Don't.  Prove your programs correct ;-)

It is possible to debug the generated C code using gdb,
but we don't really recommend this unless there is no alternative.
Also, if you compiled with @samp{-s debug.gc} rather than the
default @samp{-s asm_fast.gc},
you can use the various debugging options to the Mercury runtime;
for example @samp{-dg} dumps an execution trace.

@subsection Setting stack sizes
With conservative garbage collection (the default), the heap will be
dynamically expanded as needed, but the det stack and the nondet stack
are allocated fixed sizes at program start-up.  The default size is
512k for the det stack and 128k for the nondet stack, but these can be
overridden with the @samp{-sd} and @samp{-sn} options. 
The Mercury runtime will ensure that stack overflow is trapped by the
virtual memory system, on operating systems that support that.

@node Using NU-Prolog, Using SICStus, Using Mercury, Top
@section Using NU-Prolog

Before you attempt to execute a Mercury program with NU-Prolog, you
should run it past the Mercury compiler, to check that it does not have
any errors.  In our experience, omitting that step is not wise, since
you often waste a lot of time debugging problems that the compiler
could have detected for you.

@subsection Compiling modules
Use the command @samp{mnc @var{module}.m}.
(Ignore any warnings about "XXX is a system predicate.
It shouldn't be used as a non-terminal.")

@subsection Linking
Use the command @samp{mnl -o @var{module} *.no}.
(Ignore any warnings about "XXX redefined".)

@subsection Executing the program
Nothing special here - just use the command @samp{./@var{module}
@var{arguments}}.

@subsection Using the debugger.
Use the command @samp{mnp}.
Inside the debugger, load your source files with @samp{[@var{module}]}.

Alternately, you can use the --debug option to mnl when linking.
This will produce an executable whose entry point is the NU-Prolog
debugger, rather than main/2 in your program.

To start executing your program, type
@samp{r("@var{module} @var{arguments}")}.

All the NU-Prolog debugging commands work as usual.
Use the @code{trace} and @code{spy} commands, and in the tracer use
@code{l} (leap), @code{s} (skip), and @code{r} (redo).
For more information, see the NU-Prolog documentation.

By default the debugger only displays the top-level of terms;
you can use the @code{|} command to enter an interactive term
browser.  Also note that in the debugger, we use a version of
@code{error/1} which fails rather than aborting after printing the
"Software Error:" message; this makes debugging easier, but will of course
change the behaviour after an error occurs.

@subsection Hazards of using NU-Prolog
There are some Mercury programs which are not valid NU-Prolog programs.
In particular, Mercury will always reorder goals to ensure that they are
mode-correct (or report a mode error), but NU-Prolog will not always do so,
and will sometimes just silently give the wrong result.  For example,
in Mercury the following predicate will usually succeed, whereas in
NU-Prolog it will always fail.

@example
        :- pred p(list(int)::in, list(int)::out) is semidet.
        p(L0, L) :-
                L \= [],
                q(L0, L).

        :- pred q(list(int)::in, list(int)::out) is det.
@end example

@noindent
The reason is that in Mercury, the test @samp{L \= []} is reordered to
after the call to @code{q/2}, but in NU-Prolog, it executes even though
@code{L} is not bound, and consequently the test always fails.

(NU-Prolog has logical alternatives to the non-logical Prolog operations
like @samp{\=}, but during the development of the Mercury compiler
we had to abandon their use for efficiency reasons.)

Another hazard is that NU-Prolog does not have a garbage collector :-(

@node Using SICStus, FAQs, Using NU-Prolog, Top
@section Using SICStus Prolog

Using SICStus Prolog is similar to using NU-Prolog,
except that the commands to use are @samp{msc}, @samp{msl}, and
@samp{msp} rather than @samp{mnc}, @samp{mnl}, and @samp{mnp}.

Note that due to shortcomings in SICStus Prolog (in particular,
the lack of backslash escapes in character strings), you need
to use @samp{sicstus_conv} to convert Mercury @samp{.m} files
to the @samp{.pl} files that SICStus Prolog expects before
you can load them into the interpreter.  The command to use is just
@samp{sicstus_conv @var{module}.m}.

@node FAQs, Invocation, Using SICStus, Top
@chapter Mercury FAQs
@table @emph
@item What does the error message ``undefined symbol @samp{'.'/2}'' mean?

You need to explicit import the @samp{list} module

@example
:- import_module list.
@end example

@noindent
if your code uses lists.

@item Why doesn't @samp{X <= 3} work?

In Mercury, less-than-or-equal to is written as @samp{=<} not
as @samp{<=}, which is used for reverse implication.

@item I followed the instructions in the user's guide, but it still didn't work.  What do I do next?

Send mail to mercury-bugs@@cs.mu.oz.au, and we'll try to solve your problem.

@end table

@node Invocation,, FAQs, Top
@chapter Invocation

This section contains a brief description of all the options
available for @samp{mc}, the Mercury compiler.
Sometimes this list is a little out-of-date; use @samp{mc --help}
to get the most up-to-date list.

@code{mc} is invoked as
@example
mc [@var{options}] @var{modules}
@end example

Options are either short (single-letter) options preceded by
a single @samp{-}, or long options preceded by @samp{--}.
Options are case-sensitive.
I call options that do not take arguments @dfn{flags}.
Single-letter flags may be grouped with a single @samp{-},
e.g. @samp{-vVc}.  Single-letter flags may be negated by
appending another trailing @samp{-}, e.g. @samp{-v-}.
Long flags may be negated by preceding them with @samp{no-},
e.g. @samp{--no-verbose}.

For module names, the trailing @file{.m} is optional.

@section Warning Options:
@table @code
@item -w-
@itemx --no-warn-singleton-variables
Don't warn about variables which only occur once.

@item --no-warn-missing-det-decls
Don't warn about predicate declarations which don't
have a determinism annotation.

@item --no-warn-det-decls-too-lax
Don't warn about determinism declarations
which could have been stricter.
@end table

@section Verbosity Options:
@table @code
@item -v
@itemx --verbose
Output progress messages at each stage in the compilation.

@item -V
@itemx --very_verbose
Output very verbose progress messages.

@item -e
@itemx --verbose-error-messages
Explain error messages.  Asks the compiler to give you a more
detailed explanation of any errors in your program.

@item -S
@itemx --statistics
Output messages about the compiler's time/space usage

@item -T
@itemx --debug-types
Output detailed debugging traces of the type checking.

@item -N
@itemx --debug-modes
Output detailed debugging traces of the mode checking.

@item --vndebug <n>
Output detailed debugging traces of the value numbering optimization pass.
@end table

@section Output Options:
@table @code
@item -M
@itemx --generate-dependencies
Output `Make'-style dependencies for the module
and all of its dependencies to @file{@var{module}.dep}.
Only syntax analysis will be performed - this option
disables all the later phases of compilation.

@item -i
@itemx --make-interface
Write the module interface to @file{@var{module}.int}.
Also write the short interface to @file{@var{module}.int2}
As with -M, this disables type-checking, etc.

@item -C --make-call-graph
Write out the call graph to @var{module}.call_graph.

@item -G
@itemx --convert-to-goedel
Convert to Goedel. Output to file @file{@var{module}.loc}
As with -M, this disables type-checking, etc.

@item -P
@itemx --convert-to-mercury
Convert to Mercury. Output to file @file{@var{module}.ugly}
This option acts as a Mercury ugly-printer.
As with -M, it disables type-checking, etc.

@item -m-
@itemx --no-modecheck
Don't invoke the mode analysis pass of the compiler.
Just check the syntax and type-correctness of the code.

@item -d @var{stage}
@itemx --dump-hlds @var{stage}
Dump the HLDS (intermediate representation) after
the specified stage number or stage nameto
@file{@var{module}.hlds_dump.@var{num}-@var{name}}.
Stage numbers range from 0-17.
Multiple dump options accumulate.

@item -D
@itemx --verbose-dump-hlds
With @samp{--dump-hlds}, dumps some additional info.

@item -g
@itemx --generate-code
Generate code in @file{@var{module}.c}.

@item -c
@itemx --compile
Invoke the C compiler on the generated .c file.
This option implies @samp{--generate-code}.

@item --link
After compilation, produce an initialization file from
the named modules, compile it, and then link all the
object files to produce an executable.
This option implies @samp{--compile}.

@item --mod-comments
Output comments in the generated @file{.mod} file (and hence also in
the @file{.c} file.  This is primarily useful for trying to understand
how the generated C code relates to the source code, in order to
debug the compiler.

@item -l
@itemx --line-numbers
Output source line numbers in the generated code.
Only works with the -G and -M options.
@end table

@section Code generation options
@table @code
@item --no-trad-passes
Generate code by phases, not by predicates.

@item -p-
@itemx --no-polymorphism
Don't handle polymorphic types.
(Generates slightly more efficient code, but stops
polymorphism from working except in special cases.)

@item -s @var{grade}
@itemx --grade @var{grade}
Select the compilation model.  This is a convenient way of
selecting a setting for the --c-optimize, --gc,
--gcc-global-registers, --gcc-non-local-gotos,
--asm-labels, and --debug options simultaneously.
@var{grade} should be one of
@{debug, none, reg, jump, asm_jump, fast, asm_fast@}
or one of those with @file{.gc} appended.

@item --gc @{none, conservative, accurate@}
@itemx --garbage-collection @{none, conservative, accurate@}
Specify which method of garbage collection to use.
@samp{conservative} garbage collection also implies @samp{--tags none}.
@samp{accurate} is not yet implemented.

@item --no-follow-code
Don't migrate builtin goals into branched goals.

@item --no-follow-vars
Don't optimise the assignment of registers in branched goals.

@item --no-reclaim-heap-on-nondet-failure
Don't reclaim heap on backtracking in nondet code.

@item --no-reclaim-heap-on-semidet-failure
Don't reclaim heap on backtracking in semidet code.

@item --no-gcc-global-registers
Don't use GNU C's global register variables extension.

@item --no-gcc-non-local-gotos
Don't use GNU C's "labels as values" extension.

@item --no-asm-labels
Don't use inline assembler labels.

@item --tags @{none, low, high@}
Specify whether to use the low bits or the high bits of 
each word as tag bits (default: low).

@item --num-tag-bits @var{n}
Use @var{n} tag bits (used with @samp{--tags high}).

@item --cc @var{compiler-name}
Specify which C compiler to use.

@item --c-include-directory @var{dir}
Specify the directory containing the Mercury C header files.

@item --cflags @var{options}
Specify options to be passed to the C compiler

@item --debug
Enable debugging.
@end table

@section Optimization Options
@table @code
@item --no-optimize
Disable the optimisation pass.

@item --no-optimize-peep
Disable local peephole optimisations.

@item --no-optimize-jumps
Disable elimination of jumps to jumps.

@item --no-optimize-labels
Disable elimination of dead labels and code.

@item --optimize-value-number
Perform value numbering.

@item --no-optimize-frames
Disable stack frame optimizations.

@item --optimize-repeat @var{n}
Iterate optimizations at most @var{n} times.

@item --no-static-ground-terms
Construct all terms at runtime; disable the optimization
of constructing constant ground terms at compile time
and storing them as static constants.

@item --no-smart-indexing
Generate deterministic switches as a simple if-then-else chain;
disable string hashing and integer table-lookup indexing.

@item --req-density @var{percentage}
The jump table generated for an atomic switch
must have at least this percentage of full slots.

@item --dense-switch-size @var{size}
The jump table generated for an atomic switch
must have at least this many entries.

@item --string-switch-size @var{size}
The hash table generated for a string switch
must have at least this many entries.

@item --tag-switch-size @var{size}
The number of alternatives in a tag switch
must be at least this number.

@item --no-middle-rec
Disable the middle recursion optimization.

@item --no-inlining
Disable the inlining of simple procedures.

@item --no-common-subexpression
Disable common subexpression optimisation.

@item --common-struct
Enable optimisation of common term structures.

@item --common-goal
Enable optimisation of common goals.

@item --procs-per-c-function @var{n}
Don't put the code for more than @var{n} Mercury
procedures in a single C function.  The default
value of @var{n} is one.  Increasing @var{n} can produce
slightly more efficient code, but makes compilation slower.
Setting @var{n} to the special value zero has the effect of
putting all the procedures in a single function,
which produces the most efficient code but tends to
severely stress the C compiler.

@item --no-c-optimize
Don't enable the C compiler's optimizations.
@end table

@section Miscellaneous Options:
@table @code
@item -H @var{n}
@itemx --heap-space @var{n}
Pre-allocate @var{n} kilobytes of heap space.
This option is now obsolete.  In the past it was used to avoid
NU-Prolog's "Panic: growing stacks has required shifting the heap"
message.

@item -b @var{builtin}
@itemx --builtin-module @var{builtin}
Use @var{builtin} instead of @samp{mercury_builtin} as the 
module which always gets automatically imported.

@item -I @var{dir}
@itemx --search-directory @var{dir}
Append @var{dir} to the list of directories to be searched for 
imported modules.

@item -h
@itemx --help
Print a usage message.
@end table

@contents
@bye
