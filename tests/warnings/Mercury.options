	# XXX The warnings for this module are reported twice when
	# compiling with --intermodule-optimization due to a
	# performance bug in the handling of assertions
	# which causes typechecking to be run twice.
MCFLAGS-ambiguous_overloading	= --no-intermodule-optimization

	# We need to explicitly enable these optimizations because
	# the arg_order_rearrangement warning doesn't show up at
	# lower optimization levels.
MCFLAGS-arg_order_rearrangment	= --introduce-accumulators \
					--excess-assign --common-struct \
					--trace-optimized

MCFLAGS-duplicate_call		= --warn-duplicate-calls
MCFLAGS-duplicate_const		= --warn-duplicate-calls
MCFLAGS-unused_args_analysis    = --intermodule-analysis \
				--optimize-unused-args --warn-unused-args
MCFLAGS-unused_args_analysis2   = --intermodule-analysis \
				--optimize-unused-args --trace-optimized
MCFLAGS-unused_args_test	= --warn-unused-args
MCFLAGS-unused_import		= --warn-interface-imports
MCFLAGS-inference_test		= --infer-all

	# the infinite loop warning in simple_code.m doesn't show up unless
	# the common-struct optimization is enabled (because proving that
	# the recursive call is an infinite loop relies on argument
	# equivalence information which is only computed when the
	# common-struct optimization is enabled).
MCFLAGS-simple_code		= --common-struct

	# We need to explicitly enable these optimizations because
	# some of the infinite recursion warnings don't show up at
	# lower optimization levels.
MCFLAGS-infinite_recursion	= --excess-assign --common-struct

MCFLAGS-warn_stubs		= --allow-stubs --warn-unused-args

	# For tests that involve the termination analysis we need
	# to make sure that it is enabled otherwise the tests will fail.
MCFLAGS-pragma_term_conflict = --enable-termination
MCFLAGS-term_indirect_warning = --check-termination
MCFLAGS-foreign_term_invalid = --enable-termination

MCFLAGS-warn_dead_procs 	= --warn-dead-procs --infer-all
