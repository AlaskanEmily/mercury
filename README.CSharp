-----------------------------------------------------------------------------

INTRODUCTION

This release of Mercury contains a port to the ECMA Common Language
Infrastructure (CLI), i.e. Microsoft .NET or Mono.  The Mercury
compiler will generate C# source code that can be compiled into
bytecode suitable for running on the .NET or Mono runtime systems.

The port is mostly complete, but some parts of the Mercury standard
library are not yet implemented (for a full list see the FAQ below).

The port is currently targeted at C# 2.0 or higher.

NOTE: a previous backend also targetted the .NET runtime, by generating IL
(Intermediate Language), rather than going via C#.  That backend is
out-of-date and may be removed in the future.

PREREQUISITES

In order to try this system you will need

        - Either Microsoft.NET or Mono 2.8 or above.

WARNING

Please note that the C# backend is still an experimental feature.

-----------------------------------------------------------------------------

THE C# GRADE

The Mercury compiler currently supports the grade `csharp'.
The csharp grade is enabled by using any of the options
`--grade csharp', `--target csharp', or just `--csharp'.

To run a Mercury program using the csharp grade, you need to build the Mercury
library and runtime in the csharp grade, using the Mercury source distribution.

You can now build programs such as hello.m or calculator.m in the samples
directory.

	cd samples
	mmc --make --csharp hello

Now you can run hello

	./hello

-----------------------------------------------------------------------------

USING C#

The Mercury standard library has not been fully ported to C# yet.
The use of unimplemented procedures will result in a run-time error,
with a message such as "Sorry, not implemented: foreign code for this
function", and a stack trace.

If you find missing functionality, you can interface to C# using Mercury's
foreign language interface.

For example:

:- pred to_string(T::in, string::out) is det.
:- pragma foreign_proc("C#", to_string(T::in, Str::out), [],
"
        Str = T.ToString();
").

The implementation will include this C# code in the module's .cs file, and
you can then call the predicate to_string exactly the same as if it were
implemented using pure Mercury code.

For more information about the foreign language interface, see the Mercury
Language Reference Manual, which you can find at:

     <http://www.mercury.csse.unimelb.edu.au/information/documentation.html>

-----------------------------------------------------------------------------

FREQUENTLY ASKED QUESTIONS (FAQS)

Q. What are the advantages of using the C# back-end?

A. The main advantage is easy access to the wide range of libraries for the
   .NET platform, and the portability you get from using CIL bytecode.


Q. What features are not yet implemented for the C# back-end?

A. The following implementation features are not supported:

	Mercury-level debugging (but see next question)
	Mercury-level profiling
	trailing
	tabling

   In addition, the following individual procedures are incompletely
   implemented:

	io.read_binary/{3,4}:
	io.write_binary/{3,4}:
		io.read_binary is broken.

	benchmarking.report_stats/0:
	benchmarking.report_full_memory_stats/0:
		Memory usage statistics are not yet available, and cpu time
		is not the same as in the C backends, as per time.m.

	store.arg_ref/5:
	store.new_arg_ref/5:
		Due to the absence of RTTI, dynamic type checking is missing
		for these predicates.  They should be used with care.

   This list is not complete.


Q. How do I debug Mercury programs on .NET?

A. The only Mercury-level debugger available for C# grades is the
   source-to-source debugger; see README.ssdebug.


-----------------------------------------------------------------------------
