#!/bin/sh
#
# INSTALL - installation instructions and installation script.
#
# You need GNU C (2.6.3 or later) and GNU Make.
# Make sure that they are somewhere in your path.
#
# Step 0.  Extract the files from the gzipped tar archive.
#
# Step 1.  Run `configure'.  (Just type `sh configure'.)
#
# Step 2.  Run `make'.
#
# Step 3.  Run `make install'.
#
# Step 4.  Check the permissions on the installed files.
#
# Step 5.  Run `make clean'
#
# As a short-cut, steps 1-3 are listed below, so they can be replaced
# by just executing this file with `sh INSTALL'.
# It's advisable to redirect the output into a file, just in case
# anything should go wrong.

sh configure &&
make &&
make install

# Fine-tuning:
# ------------
#
#	   By default, the files are installed in /usr/local.
#	   If you want the files to be installed someplace else,
#	   use the `--prefix <directory>' option to `configure'.
#
#	   If your system has multiple CPUs and lots of RAM,
#	   you can uncomment the definition of PARALLEL in the Makefile
#	   to perform a parallel make.
#
#	   If you are short on disk space, you can add the line "LIBGRADES="
#	   to the file Mmake.params before installing.  (This tells it
#	   to install only the default grade of the libraries.)
#
#	   If you are short on RAM, you can add -DSMALL_CONFIG to the CFLAGS
#          line in the file boehm_gc/Makefile.  (This tells the garbage
#	   collector to tune itself for small physical memory.)
#
#	   If your system supports shared libraries, but `configure' says
#	   Mercury does not support shared libraries on this system,
#	   you can try setting the LINK_SHARED_OBJECT, SO, PIC, and PIC_O
#	   variables in the Mmake.common file.
#
#	   Efficiency will be much improved if Mercury can use gcc global
#	   register variables.  Currently these are supported for mips,
#	   sparc, alpha, i386 (see runtime/regs.h and runtime/machdeps/*). 
#	   If you want to use Mercury on some other CPU, contact us and
#	   we'll add support for gcc global registers for that CPU.
