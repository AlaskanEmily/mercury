#-----------------------------------------------------------------------------#
AC_INIT(runtime/wrapper.mod)
AC_CONFIG_HEADER(runtime/conf.h)
AC_CANONICAL_HOST
FULLARCH="$host"
AC_SUBST(FULLARCH)
if test "$prefix" = "NONE"; then
	LIBDIR="$ac_default_prefix/lib/mercury"
else
	LIBDIR="$prefix/lib/mercury"
fi
AC_SUBST(LIBDIR)
#-----------------------------------------------------------------------------#
GNU_MAKE=
echo looking for GNU Make...
AC_PROGRAMS_CHECK(GNU_MAKE,gmake make)
if test "$GNU_MAKE" != ""; then
	case "`$GNU_MAKE -v bogus 2>&1`" in
		"GNU Make"*)
			;;
		*)
			GNU_MAKE=
	esac
fi
if test "$GNU_MAKE" = ""; then
	AC_MSG_ERROR(cannot find GNU Make)
else
	echo "found GNU Make: $GNU_MAKE"
fi
AC_SUBST(GNU_MAKE)
#-----------------------------------------------------------------------------#
INSTALL_SICSTUS=
SP=
echo "looking for SICStus Prolog..."
AC_PROGRAMS_CHECK(SP,sp prolog)
if test "$SP" != ""; then
	case "`echo 'prolog_flag(version, V, V), write(V), nl, halt.' |
			$SP 2>&1`" in
		SICStus*)
			INSTALL_SICSTUS=install_sicstus
			;;
	esac
fi
if test "$INSTALL_SICSTUS" = ""; then
	AC_MSG_WARN(SICStus Prolog not found)
else
	echo "found SICStus Prolog: $SP"
fi
AC_SUBST(INSTALL_SICSTUS)
#-----------------------------------------------------------------------------#
INSTALL_NUPROLOG=
NP=

echo "looking for NU-Prolog..."
AC_PROGRAMS_CHECK(NP,np)
if test "$NP" != ""; then
	case "`$NP < /dev/null 2>&1`" in
		NU-Prolog*)
			INSTALL_NUPROLOG=install_nuprolog
			;;
	esac
fi
if test "$INSTALL_NUPROLOG" = ""; then
	AC_MSG_WARN(NU-Prolog not found)
else
	echo "found NU-Prolog: $NP"
fi
AC_SUBST(INSTALL_NUPROLOG)
#-----------------------------------------------------------------------------#
AC_PROG_CC
CFLAGS="-I runtime $CFLAGS"
AC_PROG_CPP
AC_C_CROSS
AC_PROG_RANLIB
AC_RETSIGTYPE
AC_HAVE_FUNCS(sysconf getpagesize memalign mprotect sigaction setitimer)
#-----------------------------------------------------------------------------#
# We need to ensure that runtime/conf.h exists, since some of the
# programs we attempt to compile below indirectly include it.
test -f runtime/conf.h || touch runtime/conf.h
#-----------------------------------------------------------------------------#
AC_CHECK_HEADER(sys/siginfo.h, HAVE_SIGINFO_H=1)
if test "$HAVE_SIGINFO_H" = 1; then
	AC_DEFINE(HAVE_SIGINFO)
fi
#-----------------------------------------------------------------------------#
AC_CHECK_HEADER(ucontext.h, HAVE_UCONTEXT_H=1)
if test "$HAVE_UCONTEXT_H" = 1; then
	AC_DEFINE(HAVE_UCONTEXT)
	CFLAGS="$CFLAGS -DHAVE_UCONTEXT"
else
	AC_CHECK_HEADER(sys/ucontext.h, HAVE_SYS_UCONTEXT_H=1)
	if test "$HAVE_SYS_UCONTEXT_H" = 1; then
		AC_DEFINE(HAVE_SYS_UCONTEXT)
	fi
fi
#-----------------------------------------------------------------------------#
AC_CHECK_HEADER(sys/param.h, HAVE_SYS_PARAM_H=1)
if test "$HAVE_SYS_PARAM_H" = 1; then
	AC_DEFINE(HAVE_SYS_PARAM)
fi
#-----------------------------------------------------------------------------#
AC_CHECK_HEADER(sys/time.h, HAVE_SYS_TIME_H=1)
if test "$HAVE_SYS_SYS_TIME_H" = 1; then
	AC_DEFINE(HAVE_SYS_TIME)
fi
#-----------------------------------------------------------------------------#
if test "$ac_cv_func_sigaction" = yes; then
	AC_MSG_CHECKING(for sigaction field name)
	AC_CACHE_VAL(mercury_cv_sigaction_field,
	AC_TRY_RUN([
	#include <signal.h>
	extern void handler(int signum, siginfo_t *info, void *context);
	main() {
		struct sigaction act;
		act.sa_flags = SA_SIGINFO | SA_RESTART;
		act.sa_sigaction = handler;
		if (sigemptyset(&act.sa_mask) != 0)
			exit(1);
		if (sigaction(SIGSEGV, &act, NULL) != 0)
			exit(1);
		exit(0);
	}
	void handler(int signum, siginfo_t *info, void *context) {
		return;
	}],
	[mercury_cv_sigaction_field=sa_sigaction],
	[mercury_cv_sigaction_field=sa_handler],
	[mercury_cv_sigaction_field=sa_handler]))
	AC_MSG_RESULT($mercury_cv_sigaction_field)
	AC_DEFINE_UNQUOTED(SIGACTION_FIELD,$mercury_cv_sigaction_field)
#-----------------------------------------------------------------------------#
	if test "$HAVE_SIGINFO_H" = 1 &&
	   (test "$HAVE_UCONTEXT_H" = 1 || test "$HAVE_SYS_UCONTEXT_H" = 1)
	then
		AC_MSG_CHECKING(for pc access at signals)
		AC_CACHE_VAL(mercury_cv_pc_index,
		mercury_cv_pc_index=no
		AC_TRY_RUN([
		#include <stdio.h>
		#include <signal.h>
		#include <sys/siginfo.h>
		#ifdef HAVE_UCONTEXT
		#include <ucontext.h>
		#else
		#include <sys/ucontext.h>
		#endif
		int save_signum = 0;
		int save_cause;
		int save_pc;
		extern void handler(int signum, siginfo_t *info, void *context);
		main() {
			struct sigaction act;
			act.sa_flags = SA_SIGINFO | SA_RESTART;
			act.$mercury_cv_sigaction_field = handler;
			if (sigemptyset(&act.sa_mask) != 0)
				exit(1);
			if (sigaction(SIGSEGV, &act, NULL) != 0)
				exit(1);
			if (kill(getpid(), SIGSEGV) != 0)
				exit(1);
			if (save_signum == 0)
				exit(1);
			exit(0);
		}
		void handler(int signum, siginfo_t *info, void *context) {
			save_signum = signum;
			switch (info->si_code) {
			case SEGV_MAPERR:	save_cause = info->si_code;
						break;
			case SEGV_ACCERR:	save_cause = info->si_code;
						break;
			}
			switch (info->si_code) {
			case BUS_ADRALN:	save_cause = info->si_code;
						break;
			case BUS_ADRERR:	save_cause = info->si_code;
						break;
			case BUS_OBJERR:	save_cause = info->si_code;
						break;
			}
			save_cause = info->si_code;
			/* Don't use array indexing - the square brackets
			   are autoconf quote characters */
			save_pc = *(((ucontext_t *) context)->uc_mcontext.gregs
					+ REG_PC);
		}], [mercury_cv_pc_index=REG_PC], [true], [true])
		AC_TRY_RUN([
		#include <stdio.h>
		#include <signal.h>
		#include <sys/siginfo.h>
		#ifdef HAVE_UCONTEXT
		#include <ucontext.h>
		#else
		#include <sys/ucontext.h>
		#endif
		int save_signum = 0;
		int save_cause;
		int save_pc;
		extern void handler(int signum, siginfo_t *info, void *context);
		main() {
			struct sigaction act;
			act.sa_flags = SA_SIGINFO | SA_RESTART;
			act.$mercury_cv_sigaction_field = handler;
			if (sigemptyset(&act.sa_mask) != 0)
				exit(1);
			if (sigaction(SIGSEGV, &act, NULL) != 0)
				exit(1);
			if (kill(getpid(), SIGSEGV) != 0)
				exit(1);
			if (save_signum == 0)
				exit(1);
			exit(0);
		}
		void handler(int signum, siginfo_t *info, void *context) {
			save_signum = signum;
			switch (info->si_code) {
			case SEGV_MAPERR:	save_cause = info->si_code;
						break;
			case SEGV_ACCERR:	save_cause = info->si_code;
						break;
			}
			switch (info->si_code) {
			case BUS_ADRALN:	save_cause = info->si_code;
						break;
			case BUS_ADRERR:	save_cause = info->si_code;
						break;
			case BUS_OBJERR:	save_cause = info->si_code;
						break;
			}
			save_cause = info->si_code;
			save_pc = *(((ucontext_t *) context)->uc_mcontext.gregs
					+ CTX_EPC);
		}], [mercury_cv_pc_index=CTX_EPC], [true], [true])
		)
		AC_MSG_RESULT($mercury_cv_pc_index)
		if test $mercury_cv_pc_index != no; then
			AC_DEFINE_UNQUOTED(PC_INDEX,$mercury_cv_pc_index)
		fi
	fi
fi
#-----------------------------------------------------------------------------#
AC_MSG_CHECKING(for an integer type with the same size as a pointer)
AC_CACHE_VAL(mercury_cv_word_type,
	AC_TRY_RUN([
	#include <stdio.h>
	main() {
		FILE *fp;

		fp = fopen("conftest.tags", "w");
		if (fp == NULL)
			exit(1);

		if (sizeof(int) == sizeof(void *))
		{
			fprintf(fp, "int\n");
			exit(0);
		}

		if (sizeof(long) == sizeof(void *))
		{
			fprintf(fp, "long\n");
			exit(0);
		}

		fprintf(fp, "unknown\n");
		exit(1);
	}],
	[mercury_cv_word_type=`cat conftest.tags`],
	[mercury_cv_word_type=unknown],
	[mercury_cv_word_type=unknown])
)
if test "$mercury_cv_word_type" = unknown; then
	AC_TRY_RUN([
	#include <stdio.h>
	main() {
		FILE *fp;

		fp = fopen("conftest.tags", "w");
		if (fp == NULL)
			exit(1);

		if (sizeof(long long) == sizeof(void *))
		{
			fprintf(fp, "long long\n");
			exit(0);
		}

		fprintf(fp, "unknown\n");
		exit(1);
	}],
	[mercury_cv_word_type=`cat conftest.tags`],
	[mercury_cv_word_type=unknown],
	[mercury_cv_word_type=unknown])
fi
AC_MSG_RESULT($mercury_cv_word_type)
AC_DEFINE_UNQUOTED(WORD_TYPE, $mercury_cv_word_type)
WORD_TYPE=$mercury_cv_word_type
AC_SUBST(WORD_TYPE)
#-----------------------------------------------------------------------------#
AC_MSG_CHECKING(for the number of low tag bits)
AC_CACHE_VAL(mercury_cv_low_tag_bits,
	AC_TRY_RUN([
	#include <stdio.h>
	main() {
		FILE *fp;

		fp = fopen("conftest.tags", "w");
		if (fp == NULL)
			exit(1);

		if (sizeof(void *) == 4)
		{
			fprintf(fp, "2\n");
			exit(0);
		}

		if (sizeof(void *) == 8)
		{
			fprintf(fp, "3\n");
			exit(0);
		}

		fprintf(fp, "0\n");
		exit(1);
	}],
	[mercury_cv_low_tag_bits=`cat conftest.tags`],
	[mercury_cv_low_tag_bits=0],
	[mercury_cv_low_tag_bits=0])
)
AC_MSG_RESULT($mercury_cv_low_tag_bits)
AC_DEFINE_UNQUOTED(LOW_TAG_BITS, $mercury_cv_low_tag_bits)
LOW_TAG_BITS=$mercury_cv_low_tag_bits
AC_SUBST(LOW_TAG_BITS)
#-----------------------------------------------------------------------------#
AC_MSG_CHECKING(whether we can use gcc labels)
AC_CACHE_VAL(mercury_cv_gcc_labels,
	AC_TRY_RUN([
	main() {
		void *succip;

		succip = &&last;
		goto *succip;
		exit(1);
	last:
		exit(0);
	}], [mercury_cv_gcc_labels=yes], [mercury_cv_gcc_labels=no],
		[mercury_cv_gcc_labels=no])
)
AC_MSG_RESULT($mercury_cv_gcc_labels)
if test "$mercury_cv_gcc_labels" = yes; then
	AC_DEFINE(HAVE_GCC_LABELS)
fi
#-----------------------------------------------------------------------------#
if test $mercury_cv_gcc_labels = yes; then
	AC_MSG_CHECKING(whether we can use asm labels)
	AC_CACHE_VAL(mercury_cv_asm_labels,
	AC_TRY_RUN([
	#include "imp.h"
	void *volatile volatile_global_pointer;
	extern void mercury__label1 (void) __asm__("entry_" "mercury__label1" );
	main() {
		void *addr;

		volatile_global_pointer = &&mercury__label1;
		addr = &mercury__label1;
		goto *addr;
		exit(1);

	mercury__label1:
		__asm__(".globl entry_" "mercury__label1" "\n" "entry_"
			"mercury__label1" ":");
		exit(0);
	}], [mercury_cv_asm_labels=yes], [mercury_cv_asm_labels=no],
		[mercury_cv_asm_labels=no])
	)
else
	mercury_cv_asm_labels=no
fi
AC_MSG_RESULT($mercury_cv_asm_labels)
HAVE_ASM_LABELS=$mercury_cv_asm_labels
AC_SUBST(HAVE_ASM_LABELS)
if test $HAVE_ASM_LABELS = 1; then
	AC_DEFINE(HAVE_ASM_LABELS)
fi
#-----------------------------------------------------------------------------#
if test $mercury_cv_gcc_labels = yes; then
	AC_MSG_CHECKING(whether we can use gcc labels and global registers)
	AC_CACHE_VAL(mercury_cv_gcc_model_fast,
	AC_TRY_RUN([
	#define	reg	register
	typedef	unsigned int Word;
	#define USE_GCC_NONLOCAL_GOTOS
	#define USE_GCC_GLOBAL_REGISTERS
	#include "regs.h"
	main() {
		mr0 = 20;
		mr7 = 22;
		if (mr0 + mr7 != 42)
			exit(1);
		exit(0);
	}], [mercury_cv_gcc_model_fast=yes], [mercury_cv_gcc_model_fast=no],
		[mercury_cv_gcc_model_fast=no])
	)
	AC_MSG_RESULT($mercury_cv_gcc_model_fast)
else
	mercury_cv_gcc_model_fast=no
fi
#-----------------------------------------------------------------------------#
AC_MSG_CHECKING(whether we can use global registers without gcc labels)
AC_CACHE_VAL(mercury_cv_gcc_model_reg,
AC_TRY_RUN([
#define	reg	register
typedef	unsigned int Word;
#define USE_GCC_GLOBAL_REGISTERS
#include "regs.h"
#include "memory.h"
main() {
	mr0 = 20;
	mr7 = 22;
	if (mr0 + mr7 != 42)
		exit(1);
	exit(0);
}], [mercury_cv_gcc_model_reg=yes], [mercury_cv_gcc_model_reg=no],
	[mercury_cv_gcc_model_reg=no])
)
AC_MSG_RESULT($mercury_cv_gcc_model_reg)
#-----------------------------------------------------------------------------#

if test $mercury_cv_asm_labels = yes; then
	if test $mercury_cv_gcc_model_fast = yes; then
		GRADE=asm_fast.gc
	else
		GRADE=asm_jump.gc
	fi
elif test $mercury_cv_gcc_labels = yes; then
	if test $mercury_cv_gcc_model_fast = yes; then
		GRADE=fast.gc
	else
		GRADE=jump.gc
	fi
else
	if test $mercury_cv_gcc_model_reg = yes; then
		GRADE=reg.gc
	else
		GRADE=none.gc
	fi
fi
echo "using GRADE=$GRADE to compile the compiler"
AC_SUBST(GRADE)
DEFAULT_GRADE=$GRADE
echo "using DEFAULT_GRADE=$GRADE as the default grade for applications"
AC_SUBST(DEFAULT_GRADE)

LIBGRADES="debug none"
if test $mercury_cv_gcc_labels = yes; then
	LIBGRADES="$LIBGRADES jump"
fi
if test $mercury_cv_gcc_model_reg = yes; then
	LIBGRADES="$LIBGRADES reg"
fi
if test $mercury_cv_gcc_model_fast = yes; then
	LIBGRADES="$LIBGRADES fast"
fi
if test $mercury_cv_asm_labels = yes; then
	if test $mercury_cv_gcc_model_fast = yes; then
		LIBGRADES="$LIBGRADES asm_fast"
	fi
	if test $mercury_cv_gcc_labels = yes; then
		LIBGRADES="$LIBGRADES asm_jump"
	fi
fi
for grade in $LIBGRADES; do
	LIBGRADES="$LIBGRADES $grade.gc"
done
# remove DEFAULT_GRADE from LIBGRADES
LIBGRADES=` echo " $LIBGRADES " | sed "s/ $DEFAULT_GRADE / /" `
echo "using LIBGRADES=$LIBGRADES as the set of library grades to install"
AC_SUBST(LIBGRADES)
#-----------------------------------------------------------------------------#
AC_MSG_CHECKING(whether Mercury supports shared libraries on this system)
# We ought to use $target here rather than $host - but we don't
# support cross-compilation at the moment anyhow.
case "$host" in
	sparc-sun-solaris2.*)
		AC_MSG_RESULT(yes)
		LINK_SHARED_OBJ="$CC -G"
		PIC=
		PIC_O=o
		SO=so
		;;
	mips-sgi-irix5.*)
		AC_MSG_RESULT(yes)
		LINK_SHARED_OBJ="ld -shared"
		PIC=
		PIC_O=o
		SO=so
		;;
	*)
		AC_MSG_RESULT(no)
		LINK_SHARED_OBJ="$CC"
		PIC=
		PIC_O=o
		SO=a
		;;
esac
AC_SUBST(LINK_SHARED_OBJ)
AC_SUBST(PIC)
AC_SUBST(PIC_O)
AC_SUBST(SO)
#-----------------------------------------------------------------------------#

AC_OUTPUT(Mmake.common scripts/mc scripts/mcn scripts/mcs
scripts/mercury_update_interface scripts/mgnuc scripts/mint scripts/ml
scripts/mmake scripts/mnc scripts/mnl scripts/mnp scripts/c2init
scripts/msc scripts/msl scripts/msp scripts/sicstus_conv
compiler/conf.m,

chmod a-w Mmake.common scripts/mc scripts/mcn scripts/mcs \
scripts/mercury_update_interface scripts/mgnuc scripts/mint scripts/ml \
scripts/mmake scripts/mnc scripts/mnl scripts/mnp scripts/c2init \
scripts/msc scripts/msl scripts/msp scripts/sicstus_conv \
compiler/conf.m runtime/conf.h

chmod +x scripts/mc scripts/mcn scripts/mcs \
scripts/mercury_update_interface scripts/mgnuc scripts/mint scripts/ml \
scripts/mmake scripts/mnc scripts/mnl scripts/mnp scripts/c2init \
scripts/msc scripts/msl scripts/msp scripts/sicstus_conv 
)

#-----------------------------------------------------------------------------#
