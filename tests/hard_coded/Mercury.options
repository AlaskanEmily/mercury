MCFLAGS-allow_stubs	=	--allow-stubs --no-warn-stubs --infer-all
MCFLAGS-checked_nondet_tailcall	=	--checked-nondet-tailcalls
MCFLAGS-bigtest		=	--intermodule-optimization -O3
MCFLAGS-cc_and_non_cc_test = 	--no-inlining
MCFLAGS-constraint	=	--constraint-propagation --enable-termination
MCFLAGS-constraint_order =	--constraint-propagation --enable-termination
MCFLAGS-deforest_cc_bug =	--deforestation
MCFLAGS-lp		=	--intermodule-optimization -O3
MCFLAGS-boyer		=	--infer-all
MCFLAGS-float_consistency =	--optimize-constant-propagation
MCFLAGS-func_test	=	--infer-all
MCFLAGS-ho_order	=	--optimize-higher-order
MCFLAGS-ho_order2	=	--optimize-higher-order
MCFLAGS-no_fully_strict	=	--no-fully-strict
MCFLAGS-one_member	=	-O5
MCFLAGS-impure_foreign	=	--optimize-duplicate-calls
MCFLAGS-intermod_c_code =	--intermodule-optimization
MCFLAGS-intermod_c_code2 =	--intermodule-optimization
MCFLAGS-intermod_foreign_type = --intermodule-optimization
MCFLAGS-intermod_foreign_type2 = --intermodule-optimization
MCFLAGS-intermod_poly_mode = --intermodule-optimization
MCFLAGS-intermod_poly_mode_2 = --intermodule-optimization
MCFLAGS-intermod_pragma_clause = --intermodule-optimization
MCFLAGS-intermod_pragma_clause_sub = --intermodule-optimization
MCFLAGS-intermod_type_qual =	--intermodule-optimization
MCFLAGS-intermod_type_qual2 =	--intermodule-optimization
MCFLAGS-intermod_multimode =	--intermodule-optimization
MCFLAGS-intermod_multimode_main = --intermodule-optimization

# We disable intermodule-optimization here because it isn't compatible with
# intermodule-analysis.
#
MCFLAGS-intermod_unused_args =	--no-intermodule-optimization --intermodule-analysis --optimise-unused-args
MCFLAGS-intermod_unused_args2 = --no-intermodule-optimization --intermodule-analysis --optimise-unused-args

MCFLAGS-loop_inv_test 	= 	--loop-invariants --trace-optimized
MCFLAGS-loop_inv_test0 	= 	--loop-invariants --trace-optimized
MCFLAGS-loop_inv_test1 	= 	--loop-invariants --trace-optimized
MCFLAGS-loop_inv_test2 	= 	--loop-invariants --trace-optimized
MCFLAGS-puzzle_detism_bug = 	--trace-optimized --inlining
MCFLAGS-no_inline_builtins =	--no-inline-builtins
MCFLAGS-no_warn_singleton =	--halt-at-warn
MCFLAGS-nondet_copy_out =	--no-inlining --nondet-copy-out
MCFLAGS-redoip_clobber	=	--no-inlining
MCFLAGS-rnd		=	-O6
MCFLAGS-split_c_files	=	--trace rep
MCFLAGS-trans_intermod_user_equality = --intermodule-optimization \
				--transitive-intermodule-optimization
MCFLAGS-trans_intermod_user_equality2 = --intermodule-optimization \
				--transitive-intermodule-optimization
MCFLAGS-trans_intermod_user_equality3 = --intermodule-optimization \
				--transitive-intermodule-optimization
MCFLAGS-type_qual	= 	--infer-all
MCFLAGS-type_spec	=	--user-guided-type-specialization
MCFLAGS-existential_types_test = --infer-all
MCFLAGS-existential_float = --infer-all
MCFLAGS-user_defined_equality	= --infer-all
MCFLAGS-parse		=	--trace rep
MCFLAGS-unused_float_box_test =	--infer-all

MCFLAGS-target_mlobjs	= 	--pre-link-command "mmake target_mlobjs_c.o"
MLOBJS-target_mlobjs	=	target_mlobjs_c.o

# In grade `none' with options `-O1 --opt-space' on kryten
# (a sparc-sun-solaris2.5 system), mode_choice needs to be linked
# with `--no-strip', otherwise it gets a seg fault. 
# The test case ../hard_coded/string_test suffers from a similar problem.
# This is probably a bug in one of the underlying tools (e.g. the Solaris
# linker) rather than a bug in Mercury, and since it is goes away when you
# compile with debugging information, it is very difficult to debug.
# It is much easier to just work around it this way rather than
# tracking it down.
MLFLAGS-mode_choice = --no-strip

# parse.m gets compiled with --trace rep and linked with --trace because
# it is a regression test for a bug that only showed up with tracing enabled.
# It needs to be compiled with --no-pic-reg, since it is linked
# statically.  I have no idea why it gets linked statically.
# However, currently it is the only test case we have which gets linked
# statically, and we do want to have at least one test case to test
# static linking.
MGNUCFLAGS-parse	=	--no-pic-reg
MGNUCFLAGS-parse_init	=	--no-pic-reg
MLFLAGS-parse		=	--trace --static

MLFLAGS-split-c-files	=	--trace

MLFLAGS-needs_init	= 	--include-initialization-code --extra-inits

# These tests run out of memory in non-GC grades
# unless we increase the heap size from the default 4M.
# The sizes specified here (70 Mb and 20 Mb respectively)
# are sufficient for running these tests on 64-bit systems.
# The setting of `--mdb-out' tests the quoting of runtime
# options containing special characters.

MLFLAGS-integer_test = \
		--runtime-flags "--heap-size 70000 --mdb-out \"mdb\\mdb out\""
MLFLAGS-rational_test = --runtime-flags "--heap-size 20000"

MCFLAGS-constant_prop_1 = --optimize-constant-propagation \
		--trace-optimized
MCFLAGS-constant_prop_2 = --optimize-constant-propagation \
		--optimize-dead-procs --trace-optimized
