#-----------------------------------------------------------------------------#

THIS_DIR = hard_coded

#-----------------------------------------------------------------------------#

ORDINARY_PROGS=	\
	address_of_builtins \
	agg \
	any_free_unify \
	bidirectional \
	brace \
	builtin_inst_rename \
	boyer \
	c_write_string \
	cc_and_non_cc_test \
	cc_multi_bug \
	cc_nondet_disj \
	checked_nondet_tailcall \
	closure_extension \
	common_type_cast \
	compare_spec \
	comparison \
	contains_char \
	constraint \
	constraint_order \
	construct_test \
	curry \
	curry2 \
	cut_test \
	cycles \
	cycles2 \
	deconstruct_arg \
	deep_copy \
	deep_copy_bug \
	deep_copy_exist \
	deforest_cc_bug \
	det_in_semidet_cntxt \
	dir_test \
	division_test \
	dot_separator \
	dupcall_types_bug \
	dupcall_impurity \
	elim_special_pred \
	eqv_type_bug \
	erroneous_liveness \
	error_func \
	existential_bound_tvar \
	existential_float \
	existential_reordering \
	existential_reordering_class \
	existential_type_switch_opt \
	existential_types_test \
	expand \
	export_test \
	factt \
	factt_sort_test \
	failure_unify \
	field_syntax \
	float_field \
	float_map \
	float_reg \
	float_rounding_bug \
	foreign_and_mercury \
	foreign_import_module \
	foreign_type \
	foreign_type2 \
	foreign_type3 \
	frameopt_pragma_redirect \
	free_free_mode \
	func_and_pred \
	func_ctor_ambig \
	func_test \
	getopt_test \
	ground_dd \
	hash_bug \
	hash_init_bug \
	higher_order_func_test \
	higher_order_syntax \
	higher_order_syntax2 \
	higher_order_type_manip \
	ho_func_default_inst \
	ho_func_reg \
	ho_order \
	ho_order2 \
	ho_solns \
	ho_univ_to_type \
	impossible_unify \
	impure_foreign \
	impure_prune \
	integer_test \
	intermod_c_code \
	intermod_foreign_type \
	intermod_multimode_main \
	intermod_pragma_clause \
	intermod_type_qual \
	join_list \
	mapped_module \
	merge_and_remove_dups \
	minint_bug \
	mode_choice \
	multi_map_test \
	multimode \
	myset_test \
	name_mangling \
	no_fully_strict \
	no_inline \
	no_inline_builtins \
	no_warn_singleton \
	nondet_ctrl_vn \
	nondet_copy_out \
	nullary_ho_func \
	null_char \
	pprint_test \
	pprint_test2 \
	pragma_c_code \
	pragma_export \
	pragma_import \
	pragma_inline \
	pretty_printing \
	qual_adv_test \
	qual_basic_test \
	qual_is_test \
	quantifier \
	quantifier2 \
	quoting_bug_test \
	random_permutation \
	random_simple \
	rational_test \
	redoip_clobber \
	relation_test \
	remove_file \
	reorder_di \
	rev_arith \
	reverse_arith \
	rtc_bug \
	rtti_strings \
	setjmp_test \
	shift_test \
	solve_quadratic \
	space \
	stable_sort \
	string_alignment \
	string_alignment_bug \
	string_loop \
	string_strip \
	string_suffix_bug \
	target_mlobjs \
	term_io_test \
	term_to_univ_test \
	test_bitset \
	test_cord \
	test_imported_no_tag \
	tim_qual1 \
	time_test \
	trans_intermod_user_equality \
	transitive_inst_type \
	tuple_test \
	tuple_test \
	type_ctor_desc \
	type_ctor_desc_manip \
	type_qual \
	type_spec_ho_term \
	type_spec_modes \
	type_to_term_bug \
	unify_expression \
	unify_typeinfo_bug \
	unify_existq_cons \
	uniq_duplicate_call \
	unused_float_box_test \
	user_compare \
	user_defined_equality2 \
	write \
	write_reg1 \
	write_reg2

# XXX test_array2d does not work in at least asm_fast.gc.profdeep; the
# problem does not lie in test_array2d or array2d and has not yet been
# fixed.
ifeq "$(findstring profdeep,$(GRADE))" ""
	BROKEN_FOR_PROFDEEP = \
		test_array2d
else
	BROKEN_FOR_PROFDEEP =
endif

# These tests trigger a bug in lcc
ifeq "$(findstring lcc,$(shell $(MGNUC) -v 2>&1))" "lcc"
  BROKEN_FOR_LCC_PROGS =
else
  BROKEN_FOR_LCC_PROGS = \
		bigtest \
		rnd
endif

# These tests require the implementation to support closure layouts
CLOSURE_LAYOUT_PROGS = \
	copy_pred \
	copy_pred_2

# This test requires the implementation's representation of characters
# to be the same as their representation in files, which is not true
# for the IL and Java back-ends, which use Unicode internally.
ifeq "$(filter il% java%,$(GRADE))" ""
	CHAR_REP_PROGS = special_char
else
	CHAR_REP_PROGS =
endif

# We do not pass the following tests at all:
#
# XXX float_consistency:
#     floats in Mercury aren't consistent -- see the comments at the
#     top of library/float.m.
#
# XXX loop_inv_test0, loop_inv_test1, loop_inv_test2:
#     loop invariant optimization is not properly optimizing these cases.
#
# XXX var_not_found -- mode error in automatically generated unification
#		predicate.  This test uses partially instantiated modes,
#		which are not yet fully supported.
#
# XXX csharp_test doesn't work yet (not even in il* grades)
#
# XXX needs_init doesn't work yet in profiling grades.
#
# XXX compare_rep_array doesn't work because MR_COMPARE_BY_RTTI is
#     not yet implemented for arrays.

# The following tests are passed only in some grades.

# Deep profiling cannot yet handle exceptions being caught, which the
# allow_stubs and user_defined_equality test cases do.

ifeq "$(findstring profdeep,$(GRADE))" ""
	EXCEPTION_PROGS = \
		allow_stubs \
		user_defined_equality
else
	EXCEPTION_PROGS =
endif

# compare_representation does not work in the MLDS grades (e.g. hlc.gc),
# because comparison of closures gives "Sorry, not implemented" when
# MR_HIGHLEVEL_CODE is set.
#
# factt_non does not work in the MLDS grades because the code for nondet
# fact tables assumes that we're using the LLDS back-end. Also, fact tables
# and deep profiling do not (yet) mix.
#
# type_tables does not work in the MLDS grades because the test itself
# is a quick hack that assumes the use of the LLDS backend; it should
# be replaced by a test that exercises functionality enabled by type tables.
# However, this must wait for the implementation of that functionality.

ifeq "$(filter hl% il% java%,$(GRADE))" ""
	ifeq "$(findstring profdeep,$(GRADE))" ""
		BACKEND_PROGS_2 = \
			factt_non
	else
		BACKEND_PROGS_2 =
	endif
	
	BACKEND_PROGS = \
		$(BACKEND_PROGS_2) \
		compare_representation \
		compare_rep_usereq \
		type_tables 
else
	BACKEND_PROGS =
endif

# The MLDS back-end doesn't support nondet C in trailing grades,
# or in no-GC grades (except with --no-reclaim-heap-on-failure).
# We also don't support nondet C in deep profiling grades.
# These tests are also not supported in IL and Java grades,
# since those back-ends don't support the C interface at all.
# (XXX perhaps we should add analagous tests of the nondet IL, C#, MC++,
# and [evenetually] Java interfaces?)
ifneq "$(filter il% java%,$(GRADE))" ""
	NONDET_C_PROGS =
else
  ifeq "$(findstring hl,$(GRADE))$(findstring .tr,$(GRADE))" "hl.tr"
	NONDET_C_PROGS =
  else
    ifeq "$(findstring hl,$(GRADE))$(findstring .gc,$(GRADE))" "hl"
	NONDET_C_PROGS =
    else
	ifneq "$(findstring profdeep,$(GRADE))" ""
		NONDET_C_PROGS =
	else
		NONDET_C_PROGS = \
			inline_nondet_pragma_c \
			nondet_c \
			nondet_pragma_c_bug
	endif
    endif
  endif
endif

# string_hash tests features of the Mercury C runtime.
# It requires too much memory to be used in non-GC grades.
ifeq "$(filter il% java%,$(GRADE))$(findstring gc,$(GRADE))" "gc"
	C_AND_GC_ONLY_PROGS=string_hash
else
	C_AND_GC_ONLY_PROGS=
endif	

# Static linking doesn't work on Solaris in debug grades
# ('-ldl' doesn't work with static linking).
STATIC_LINK_PROGS =
ifneq "$(findstring solaris,$(FULLARCH))" "solaris"
	# The `parse' test also links with the debug libraries,
	# so it only works in LLDS grades.
	ifeq "$(filter hl% java% il%,$(GRADE))" ""
		STATIC_LINK_PROGS = parse
	endif
endif

# We currently don't do any testing in grade java on this directory.
ifneq "$(findstring java,$(GRADE))" ""
	PROGS =
else
	PROGS = $(ORDINARY_PROGS) $(BROKEN_FOR_LCC_PROGS) \
		$(CLOSURE_LAYOUT_PROGS) $(EXCEPTION_PROGS) \
		$(BACKEND_PROGS) $(NONDET_C_PROGS) \
		$(C_AND_GC_ONLY_PROGS) $(STATIC_LINK_PROGS) \
		$(CHAR_REP_PROGS) $(BROKEN_FOR_PROFDEEP)
endif

# --split-c-files does not work in the hl* grades (e.g. hlc.gc),
# because it hasn't yet been implemented yet.
# The same is true for deep profiling grades and `mmc --make'.
ifeq "$(findstring yes,$(MMAKE_USE_MMC_MAKE))$(filter hl% il% java%,$(GRADE))$(findstring profdeep,$(GRADE))" ""
	SPLIT_PROGS = mapped_module split_c_files
else
	SPLIT_PROGS =
endif

#-----------------------------------------------------------------------------#

TESTS = $(PROGS) $(SPLIT_PROGS:%=%.split)
SUBDIRS = typeclasses sub-modules exceptions purity
TESTS_DIR=..
include $(TESTS_DIR)/Mmake.common

# Module-specific options should go in Mercury.options so they
# can be found by `mmc --make'.
include Mercury.options

%.runtest: %.res ;

$(SPLIT_PROGS:%=%.split.depend): %.split.depend: %.depend ;
$(SPLIT_PROGS:%=%.split.realclean): %.split.realclean: %.realclean ;

mapped_module.depend: Mercury.modules

#-----------------------------------------------------------------------------#

# no_fully_strict is expected to fail (it calls error/1).
# We also need to pipe the output through sed to avoid hard-coding
# dependencies on particular line numbers in the standard library source code.
no_fully_strict.out: no_fully_strict
	if ./no_fully_strict > $@.tmp 2>&1; then \
		grep . $@.tmp; \
		exit 1; \
	else \
                sed	-e 's/exception.m:[0-9]*/exception.m:NNNN/g' \
			-e 's/require.m:[0-9]*/require.m:NNNN/g' \
			< $@.tmp > $@; \
		rm -f $@.tmp; \
	fi

#-----------------------------------------------------------------------------#

dir_test.out: prepare_for_dir_test

prepare_for_dir_test:
	rm -rf test_dir unwritable
	touch unwritable
	chmod -w unwritable

dir_test.clean: clean_dir_test

.PHONY: clean_dir_test
clean_dir_test:
	rm -rf test_dir unwritable

#-----------------------------------------------------------------------------#

clean_local:
	rm -f target_mlobjs_c.o		

realclean_local:
	rm -f Mercury.modules

#-----------------------------------------------------------------------------#

.PHONY: Mercury.modules
Mercury.modules:
	$(MC) -f $(ALL_MCFLAGS) source_file_map.m

#-----------------------------------------------------------------------------#
